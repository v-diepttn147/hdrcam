#pragma once

// @generated by tools/codegen/gen.py from RedispatchFunctions.h

#include <c10/core/Scalar.h>
#include <ATen/Tensor.h>
#include <c10/core/Storage.h>
#include <ATen/core/Generator.h>
#include <c10/util/Deprecated.h>
#include <ATen/DeviceGuard.h>
#include <c10/core/TensorOptions.h>
#include <ATen/core/Reduction.h>
#include <c10/util/Optional.h>
#include <ATen/TensorUtils.h>
#include <ATen/Context.h>
#include <ATen/TracerMode.h>
#include <ATen/core/op_registration/hacky_wrapper_for_legacy_signatures.h>

namespace at {

namespace redispatch {
    TORCH_API Tensor _cast_Byte(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool non_blocking=false);
    TORCH_API Tensor _cast_Char(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool non_blocking=false);
    TORCH_API Tensor _cast_Double(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool non_blocking=false);
    TORCH_API Tensor _cast_Float(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool non_blocking=false);
    TORCH_API Tensor _cast_Int(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool non_blocking=false);
    TORCH_API Tensor _cast_Long(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool non_blocking=false);
    TORCH_API Tensor _cast_Short(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool non_blocking=false);
    TORCH_API Tensor _cast_Half(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool non_blocking=false);
    TORCH_API void _backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, TensorList inputs, const c10::optional<Tensor> & gradient={}, c10::optional<bool> retain_graph=c10::nullopt, bool create_graph=false);
    TORCH_API void set_data(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & new_data);
    TORCH_API Tensor data(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API bool is_leaf(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API int64_t output_nr(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API int64_t _version(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & requires_grad_(c10::DispatchKeySet dispatchKeySet, Tensor & self, bool requires_grad=true);
    TORCH_API void retain_grad(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor _fw_primal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t level);
    TORCH_API Tensor _make_dual(c10::DispatchKeySet dispatchKeySet, const Tensor & primal, const Tensor & tangent, int64_t level);
    TORCH_API std::tuple<Tensor,Tensor> _unpack_dual(c10::DispatchKeySet dispatchKeySet, const Tensor & dual, int64_t level);
    TORCH_API Tensor & rename_(c10::DispatchKeySet dispatchKeySet, Tensor & self, c10::optional<DimnameList> names);
    TORCH_API Tensor rename(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<DimnameList> names);
    TORCH_API Tensor align_to(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList names);
    TORCH_API Tensor align_to(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList order, int64_t ellipsis_idx);
    TORCH_API Tensor align_as(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API std::vector<Tensor> align_tensors(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _assert_async(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor refine_names(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList names);
    TORCH_API bool _use_cudnn_ctc_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank);
    TORCH_API std::tuple<Tensor,Tensor> _cudnn_ctc_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity);
    TORCH_API bool _use_cudnn_rnn_flatten_weight(c10::DispatchKeySet dispatchKeySet);
    TORCH_API Tensor _cudnn_rnn_flatten_weight(c10::DispatchKeySet dispatchKeySet, TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, bool bidirectional);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(c10::DispatchKeySet dispatchKeySet, const Tensor & input, TensorList weight, int64_t weight_stride0, const c10::optional<Tensor> & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask);
    TORCH_API Tensor _cudnn_init_dropout_state(c10::DispatchKeySet dispatchKeySet, double dropout, bool train, int64_t dropout_seed, TensorOptions options);
    TORCH_API Tensor _cudnn_init_dropout_state(c10::DispatchKeySet dispatchKeySet, double dropout, bool train, int64_t dropout_seed, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API int64_t _debug_has_internal_overlap(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::tuple<Tensor,Tensor> _fused_dropout(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double p, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor _masked_scale(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mask, double scale);
    TORCH_API std::tuple<Tensor,Tensor> _sobol_engine_draw(c10::DispatchKeySet dispatchKeySet, const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype);
    TORCH_API Tensor & _sobol_engine_ff_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated);
    TORCH_API Tensor & _sobol_engine_scramble_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & ltm, int64_t dimension);
    TORCH_API Tensor & _sobol_engine_initialize_state_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dimension);
    TORCH_API Tensor _reshape_from_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & shape);
    TORCH_API Tensor _shape_as_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor dropout(c10::DispatchKeySet dispatchKeySet, const Tensor & input, double p, bool train);
    TORCH_API Tensor & dropout_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double p, bool train);
    TORCH_API Tensor feature_dropout(c10::DispatchKeySet dispatchKeySet, const Tensor & input, double p, bool train);
    TORCH_API Tensor & feature_dropout_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double p, bool train);
    TORCH_API Tensor alpha_dropout(c10::DispatchKeySet dispatchKeySet, const Tensor & input, double p, bool train);
    TORCH_API Tensor & alpha_dropout_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double p, bool train);
    TORCH_API Tensor feature_alpha_dropout(c10::DispatchKeySet dispatchKeySet, const Tensor & input, double p, bool train);
    TORCH_API Tensor & feature_alpha_dropout_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double p, bool train);
    TORCH_API Tensor abs(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & abs_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & abs_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & abs_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor absolute(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & absolute_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & absolute_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & absolute_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor angle(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & angle_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & angle_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor view_as_real(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor view_as_complex(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor sgn(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & sgn_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & sgn_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & sgn_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor real(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor imag(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor conj(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & conj_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & conj_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor _conj(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor acos(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & acos_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & acos_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & acos_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor arccos(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & arccos_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & arccos_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & arccos_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor avg_pool1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true);
    TORCH_API Tensor adaptive_avg_pool1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size);
    TORCH_API std::tuple<Tensor,Tensor> adaptive_max_pool1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size);
    TORCH_API Tensor add(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & add_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & add_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & add_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor _add_relu(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & _add_relu_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & _add_relu_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & _add_relu_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor add(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, const Scalar & alpha=1);
    TORCH_API Tensor & add_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other, const Scalar & alpha=1);
    TORCH_API Tensor addmv(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addmv_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addmv_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addmv_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor & _addmv_impl_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & self2, const Tensor & mat, const Tensor & vec, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor addr(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & vec1, const Tensor & vec2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addr_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & vec1, const Tensor & vec2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addr_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addr_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & vec1, const Tensor & vec2, const Scalar & beta, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor affine_grid_generator(c10::DispatchKeySet dispatchKeySet, const Tensor & theta, IntArrayRef size, bool align_corners);
    TORCH_API Tensor affine_grid_generator_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, IntArrayRef size, bool align_corners);
    TORCH_API Tensor all(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API Tensor & all_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API Tensor & all_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim, Tensor & out);
    TORCH_API Tensor all(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API Tensor & all_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API Tensor & all_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim, Tensor & out);
    TORCH_API bool allclose(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false);
    TORCH_API Tensor any(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API Tensor & any_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API Tensor & any_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim, Tensor & out);
    TORCH_API Tensor any(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API Tensor & any_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API Tensor & any_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim, Tensor & out);
    TORCH_API Tensor arange(c10::DispatchKeySet dispatchKeySet, const Scalar & end, TensorOptions options={});
    TORCH_API Tensor arange(c10::DispatchKeySet dispatchKeySet, const Scalar & end, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor arange(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, TensorOptions options={});
    TORCH_API Tensor arange(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor arange(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, const Scalar & step, TensorOptions options={});
    TORCH_API Tensor arange(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, const Scalar & step, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & arange_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Scalar & end);
    TORCH_API Tensor & arange_outf(c10::DispatchKeySet dispatchKeySet, const Scalar & end, Tensor & out);
    TORCH_API Tensor & arange_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Scalar & start, const Scalar & end, const Scalar & step=1);
    TORCH_API Tensor & arange_outf(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, const Scalar & step, Tensor & out);
    TORCH_API Tensor _dim_arange(c10::DispatchKeySet dispatchKeySet, const Tensor & like, int64_t dim);
    TORCH_API Tensor argmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & argmax_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & argmax_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out);
    TORCH_API Tensor argmin(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & argmin_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & argmin_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out);
    TORCH_API Tensor acosh(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & acosh_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & acosh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & acosh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor arccosh(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & arccosh_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & arccosh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & arccosh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor asinh(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & asinh_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & asinh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & asinh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor arcsinh(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & arcsinh_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & arcsinh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & arcsinh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor atanh(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & atanh_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & atanh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & atanh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor arctanh(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & arctanh_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & arctanh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & arctanh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor as_strided(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt);
    TORCH_API Tensor & as_strided_(c10::DispatchKeySet dispatchKeySet, Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt);
    TORCH_API Tensor asin(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & asin_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & asin_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & asin_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor arcsin(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & arcsin_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & arcsin_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & arcsin_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor atan(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & atan_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & atan_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & atan_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor arctan(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & arctan_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & arctan_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & arctan_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor atleast_1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::vector<Tensor> atleast_1d(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor atleast_2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::vector<Tensor> atleast_2d(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor atleast_3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::vector<Tensor> atleast_3d(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor baddbmm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & baddbmm_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & _baddbmm_mkl_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & baddbmm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & baddbmm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor bartlett_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, TensorOptions options={});
    TORCH_API Tensor bartlett_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor bartlett_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, TensorOptions options={});
    TORCH_API Tensor bartlett_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor batch_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled);
    TORCH_API Tensor quantized_batch_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & var, double eps, double output_scale, int64_t output_zero_point);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(c10::DispatchKeySet dispatchKeySet, int64_t impl_index, const Tensor & input, const Tensor & grad_output, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var_transform, bool train, double eps, std::array<bool,3> output_mask, const Tensor & reservedSpace);
    TORCH_API Tensor bernoulli(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & bernoulli_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & bernoulli_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor & bernoulli_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & p, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & bernoulli_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double p=0.5, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor bernoulli(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double p, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor bilinear(c10::DispatchKeySet dispatchKeySet, const Tensor & input1, const Tensor & input2, const Tensor & weight, const c10::optional<Tensor> & bias);
    TORCH_API Tensor binary_cross_entropy(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & binary_cross_entropy_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & binary_cross_entropy_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out);
    TORCH_API Tensor binary_cross_entropy_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & binary_cross_entropy_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & binary_cross_entropy_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input);
    TORCH_API Tensor binary_cross_entropy_with_logits(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, const c10::optional<Tensor> & pos_weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor binary_cross_entropy_with_logits_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, const c10::optional<Tensor> & pos_weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor bincount(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Tensor> & weights={}, int64_t minlength=0);
    TORCH_API Tensor bitwise_not(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & bitwise_not_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & bitwise_not_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & bitwise_not_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor copysign(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & copysign_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & copysign_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & copysign_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor copysign(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & copysign_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor logical_not(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & logical_not_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & logical_not_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & logical_not_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor logical_xor(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & logical_xor_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & logical_xor_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & logical_xor_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor logical_and(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & logical_and_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & logical_and_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & logical_and_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor logical_or(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & logical_or_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & logical_or_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & logical_or_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor blackman_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, TensorOptions options={});
    TORCH_API Tensor blackman_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor blackman_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, TensorOptions options={});
    TORCH_API Tensor blackman_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor bmm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat2);
    TORCH_API Tensor _bmm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat2, bool deterministic=false);
    TORCH_API Tensor & bmm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & mat2);
    TORCH_API Tensor & bmm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat2, Tensor & out);
    TORCH_API Tensor & _bmm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & mat2, bool deterministic=false);
    TORCH_API Tensor & _bmm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat2, bool deterministic, Tensor & out);
    TORCH_API std::vector<Tensor> broadcast_tensors(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor broadcast_to(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size);
    TORCH_API Tensor cat(c10::DispatchKeySet dispatchKeySet, TensorList tensors, int64_t dim=0);
    TORCH_API Tensor & cat_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors, int64_t dim=0);
    TORCH_API Tensor & cat_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, int64_t dim, Tensor & out);
    TORCH_API Tensor cat(c10::DispatchKeySet dispatchKeySet, TensorList tensors, Dimname dim);
    TORCH_API Tensor & cat_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors, Dimname dim);
    TORCH_API Tensor & cat_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, Dimname dim, Tensor & out);
    TORCH_API Tensor block_diag(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor ceil(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & ceil_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & ceil_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & ceil_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor chain_matmul(c10::DispatchKeySet dispatchKeySet, TensorList matrices);
    TORCH_API std::vector<Tensor> unsafe_chunk(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t chunks, int64_t dim=0);
    TORCH_API std::vector<Tensor> chunk(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t chunks, int64_t dim=0);
    TORCH_API std::vector<Tensor> tensor_split(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t sections, int64_t dim=0);
    TORCH_API std::vector<Tensor> tensor_split(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef indices, int64_t dim=0);
    TORCH_API std::vector<Tensor> tensor_split(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & tensor_indices_or_sections, int64_t dim=0);
    TORCH_API Tensor clamp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & min=c10::nullopt, const c10::optional<Scalar> & max=c10::nullopt);
    TORCH_API Tensor & clamp_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const c10::optional<Scalar> & min=c10::nullopt, const c10::optional<Scalar> & max=c10::nullopt);
    TORCH_API Tensor & clamp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const c10::optional<Scalar> & min=c10::nullopt, const c10::optional<Scalar> & max=c10::nullopt);
    TORCH_API Tensor & clamp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max, Tensor & out);
    TORCH_API Tensor clamp_max(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & max);
    TORCH_API Tensor & clamp_max_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & max);
    TORCH_API Tensor & clamp_max_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & max);
    TORCH_API Tensor & clamp_max_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & max, Tensor & out);
    TORCH_API Tensor clamp_min(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & min);
    TORCH_API Tensor & clamp_min_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & min);
    TORCH_API Tensor & clamp_min_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & min);
    TORCH_API Tensor & clamp_min_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & min, Tensor & out);
    TORCH_API Tensor clip(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & min=c10::nullopt, const c10::optional<Scalar> & max=c10::nullopt);
    TORCH_API Tensor & clip_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const c10::optional<Scalar> & min=c10::nullopt, const c10::optional<Scalar> & max=c10::nullopt);
    TORCH_API Tensor & clip_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const c10::optional<Scalar> & min=c10::nullopt, const c10::optional<Scalar> & max=c10::nullopt);
    TORCH_API Tensor & clip_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max, Tensor & out);
    TORCH_API bool cudnn_is_acceptable(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor complex(c10::DispatchKeySet dispatchKeySet, const Tensor & real, const Tensor & imag);
    TORCH_API Tensor & complex_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & real, const Tensor & imag);
    TORCH_API Tensor & complex_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & real, const Tensor & imag, Tensor & out);
    TORCH_API Tensor polar(c10::DispatchKeySet dispatchKeySet, const Tensor & abs, const Tensor & angle);
    TORCH_API Tensor & polar_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & abs, const Tensor & angle);
    TORCH_API Tensor & polar_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & abs, const Tensor & angle, Tensor & out);
    TORCH_API Tensor constant_pad_nd(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef pad, const Scalar & value=0);
    TORCH_API Tensor __dispatch_contiguous(c10::DispatchKeySet dispatchKeySet, const Tensor & self, MemoryFormat memory_format=MemoryFormat::Contiguous);
    TORCH_API Tensor convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);
    TORCH_API Tensor convolution_overrideable(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask);
    TORCH_API Tensor _convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32);
    TORCH_API Tensor _convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled);
    TORCH_API Tensor _convolution_nogroup(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(c10::DispatchKeySet dispatchKeySet, const c10::optional<Tensor> & ggI, const c10::optional<Tensor> & ggW, const c10::optional<Tensor> & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32, std::array<bool,3> output_mask);
    TORCH_API Tensor conv1d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1, int64_t groups=1);
    TORCH_API Tensor conv2d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1, int64_t groups=1);
    TORCH_API Tensor conv3d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1, int64_t groups=1);
    TORCH_API Tensor conv_tbc(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad=0);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad);
    TORCH_API Tensor conv_transpose1d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, int64_t groups=1, IntArrayRef dilation=1);
    TORCH_API Tensor conv_transpose2d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, int64_t groups=1, IntArrayRef dilation=1);
    TORCH_API Tensor conv_transpose3d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, int64_t groups=1, IntArrayRef dilation=1);
    TORCH_API Tensor & copy_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & src, bool non_blocking=false);
    TORCH_API Tensor _copy_from(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & dst, bool non_blocking=false);
    TORCH_API Tensor cos(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & cos_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & cos_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & cos_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor cosh(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & cosh_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & cosh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & cosh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor cosine_embedding_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & input1, const Tensor & input2, const Tensor & target, double margin=0.0, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor count_nonzero(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim);
    TORCH_API Tensor count_nonzero(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> dim=c10::nullopt);
    TORCH_API Tensor cudnn_affine_grid_generator(c10::DispatchKeySet dispatchKeySet, const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W);
    TORCH_API Tensor cudnn_affine_grid_generator_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> cudnn_batch_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon, const Tensor & reserveSpace);
    TORCH_API Tensor cudnn_convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API Tensor cudnn_convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API Tensor cudnn_convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
    TORCH_API Tensor cudnn_convolution_backward_input(c10::DispatchKeySet dispatchKeySet, IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
    TORCH_API std::tuple<Tensor,Tensor> cudnn_convolution_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32, std::array<bool,2> output_mask);
    TORCH_API Tensor cudnn_convolution_backward_weight(c10::DispatchKeySet dispatchKeySet, IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
    TORCH_API Tensor cudnn_convolution_transpose(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API Tensor cudnn_convolution_transpose(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API Tensor cudnn_convolution_transpose(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
    TORCH_API std::tuple<Tensor,Tensor> cudnn_convolution_transpose_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32, std::array<bool,2> output_mask);
    TORCH_API Tensor cudnn_convolution_transpose_backward_input(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
    TORCH_API Tensor cudnn_convolution_transpose_backward_weight(c10::DispatchKeySet dispatchKeySet, IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
    TORCH_API Tensor cudnn_grid_sampler(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grid);
    TORCH_API std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grid, const Tensor & grad_output);
    TORCH_API std::tuple<Tensor,Tensor> cummax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API std::tuple<Tensor &,Tensor &> cummax_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t dim);
    TORCH_API std::tuple<Tensor &,Tensor &> cummax_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> cummax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim);
    TORCH_API std::tuple<Tensor &,Tensor &> cummax_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, Dimname dim);
    TORCH_API std::tuple<Tensor &,Tensor &> cummax_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, Tensor & values, Tensor & indices);
    TORCH_API void _cummax_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & values, Tensor & indices, int64_t dim);
    TORCH_API std::tuple<Tensor,Tensor> cummin(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API std::tuple<Tensor &,Tensor &> cummin_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t dim);
    TORCH_API std::tuple<Tensor &,Tensor &> cummin_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> cummin(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim);
    TORCH_API std::tuple<Tensor &,Tensor &> cummin_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, Dimname dim);
    TORCH_API std::tuple<Tensor &,Tensor &> cummin_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, Tensor & values, Tensor & indices);
    TORCH_API void _cummin_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & values, Tensor & indices, int64_t dim);
    TORCH_API Tensor cummaxmin_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & input, const Tensor & indices, int64_t dim);
    TORCH_API Tensor cumprod(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumprod_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumprod_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumprod_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor cumprod(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumprod_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumprod_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumprod_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor cumprod_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & input, int64_t dim, const Tensor & output);
    TORCH_API Tensor cumsum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumsum_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumsum_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumsum_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor cumsum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumsum_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumsum_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & cumsum_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor ctc_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank=0, int64_t reduction=at::Reduction::Mean, bool zero_infinity=false);
    TORCH_API Tensor ctc_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank=0, int64_t reduction=at::Reduction::Mean, bool zero_infinity=false);
    TORCH_API std::tuple<Tensor,Tensor> _ctc_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank=0, bool zero_infinity=false);
    TORCH_API Tensor _ctc_loss_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity=false);
    TORCH_API Tensor diag_embed(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t offset=0, int64_t dim1=-2, int64_t dim2=-1);
    TORCH_API Tensor diagflat(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t offset=0);
    TORCH_API Tensor diagonal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t offset=0, int64_t dim1=0, int64_t dim2=1);
    TORCH_API Tensor diagonal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname outdim, Dimname dim1, Dimname dim2, int64_t offset=0);
    TORCH_API Tensor diagonal_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, IntArrayRef input_sizes, int64_t offset, int64_t dim1, int64_t dim2);
    TORCH_API Tensor & fill_diagonal_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & fill_value, bool wrap=false);
    TORCH_API Tensor diff(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t n=1, int64_t dim=-1, const c10::optional<Tensor> & prepend={}, const c10::optional<Tensor> & append={});
    TORCH_API Tensor & diff_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t n=1, int64_t dim=-1, const c10::optional<Tensor> & prepend={}, const c10::optional<Tensor> & append={});
    TORCH_API Tensor & diff_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t n, int64_t dim, const c10::optional<Tensor> & prepend, const c10::optional<Tensor> & append, Tensor & out);
    TORCH_API Tensor div(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & div_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & div_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & div_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor div(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, std::string rounding_mode);
    TORCH_API Tensor & div_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other, std::string rounding_mode);
    TORCH_API Tensor & div_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other, std::string rounding_mode);
    TORCH_API Tensor & div_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, std::string rounding_mode, Tensor & out);
    TORCH_API Tensor div(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & div_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor div(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, std::string rounding_mode);
    TORCH_API Tensor & div_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other, std::string rounding_mode);
    TORCH_API Tensor divide(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & divide_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & divide_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & divide_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor divide(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & divide_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor divide(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, std::string rounding_mode);
    TORCH_API Tensor & divide_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other, std::string rounding_mode);
    TORCH_API Tensor & divide_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other, std::string rounding_mode);
    TORCH_API Tensor & divide_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, std::string rounding_mode, Tensor & out);
    TORCH_API Tensor divide(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, std::string rounding_mode);
    TORCH_API Tensor & divide_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other, std::string rounding_mode);
    TORCH_API Tensor true_divide(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & true_divide_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & true_divide_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & true_divide_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor true_divide(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & true_divide_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor dot(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & tensor);
    TORCH_API Tensor & dot_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & tensor);
    TORCH_API Tensor & dot_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & tensor, Tensor & out);
    TORCH_API Tensor vdot(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & vdot_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & vdot_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor einsum(c10::DispatchKeySet dispatchKeySet, std::string equation, TensorList tensors);
    TORCH_API Tensor embedding(c10::DispatchKeySet dispatchKeySet, const Tensor & weight, const Tensor & indices, int64_t padding_idx=-1, bool scale_grad_by_freq=false, bool sparse=false);
    TORCH_API Tensor embedding_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse);
    TORCH_API Tensor embedding_dense_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
    TORCH_API Tensor & embedding_renorm_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & indices, double max_norm, double norm_type);
    TORCH_API Tensor embedding_sparse_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_forward_only(c10::DispatchKeySet dispatchKeySet, const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const c10::optional<Tensor> & per_sample_weights={}, bool include_last_offset=false);
    TORCH_API std::tuple<Tensor,Tensor> _rowwise_prune(c10::DispatchKeySet dispatchKeySet, const Tensor & weight, const Tensor & mask, ScalarType compressed_indices_dtype);
    TORCH_API Tensor row_stack(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor & row_stack_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors);
    TORCH_API Tensor & row_stack_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, Tensor & out);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(c10::DispatchKeySet dispatchKeySet, const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const c10::optional<Tensor> & per_sample_weights={}, bool include_last_offset=false);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(c10::DispatchKeySet dispatchKeySet, const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const c10::optional<Tensor> & per_sample_weights={}, bool include_last_offset=false);
    TORCH_API Tensor _embedding_bag_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights);
    TORCH_API Tensor _embedding_bag_sparse_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights);
    TORCH_API Tensor _embedding_bag_dense_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights);
    TORCH_API Tensor _embedding_bag_per_sample_weights_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode);
    TORCH_API Tensor empty(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor empty(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor empty(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor empty(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor new_empty(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor new_empty(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor new_empty_strided(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, IntArrayRef stride, TensorOptions options={});
    TORCH_API Tensor new_empty_strided(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor new_full(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, const Scalar & fill_value, TensorOptions options={});
    TORCH_API Tensor new_full(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, const Scalar & fill_value, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor new_zeros(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor new_zeros(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor _empty_affine_quantized(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, TensorOptions options={}, double scale=1, int64_t zero_point=0, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);
    TORCH_API Tensor _empty_affine_quantized(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor _empty_per_channel_affine_quantized(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);
    TORCH_API Tensor _empty_per_channel_affine_quantized(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor & resize_(c10::DispatchKeySet dispatchKeySet, Tensor & self, IntArrayRef size, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor empty_quantized(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, const Tensor & qtensor);
    TORCH_API Tensor & empty_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor & empty_outf(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<MemoryFormat> memory_format, Tensor & out);
    TORCH_API Tensor empty_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor empty_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor empty_strided(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, IntArrayRef stride, TensorOptions options={});
    TORCH_API Tensor empty_strided(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, IntArrayRef stride, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor erf(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & erf_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & erf_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & erf_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor erfc(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & erfc_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & erfc_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & erfc_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor exp(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & exp_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & exp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & exp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor exp2(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & exp2_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & exp2_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & exp2_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor expm1(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & expm1_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & expm1_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & expm1_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor expand(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size, bool implicit=false);
    TORCH_API Tensor expand_as(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor eye(c10::DispatchKeySet dispatchKeySet, int64_t n, TensorOptions options={});
    TORCH_API Tensor eye(c10::DispatchKeySet dispatchKeySet, int64_t n, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor eye(c10::DispatchKeySet dispatchKeySet, int64_t n, int64_t m, TensorOptions options={});
    TORCH_API Tensor eye(c10::DispatchKeySet dispatchKeySet, int64_t n, int64_t m, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & eye_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t n);
    TORCH_API Tensor & eye_outf(c10::DispatchKeySet dispatchKeySet, int64_t n, Tensor & out);
    TORCH_API Tensor & eye_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t n, int64_t m);
    TORCH_API Tensor & eye_outf(c10::DispatchKeySet dispatchKeySet, int64_t n, int64_t m, Tensor & out);
    TORCH_API Tensor flatten(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t start_dim=0, int64_t end_dim=-1);
    TORCH_API Tensor flatten(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim);
    TORCH_API Tensor flatten(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim);
    TORCH_API Tensor flatten(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dims, Dimname out_dim);
    TORCH_API Tensor unflatten(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, IntArrayRef sizes, c10::optional<DimnameList> names=c10::nullopt);
    TORCH_API Tensor unflatten(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, IntArrayRef sizes, DimnameList names);
    TORCH_API Tensor & fill_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & value);
    TORCH_API Tensor & fill_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & value);
    TORCH_API Tensor floor(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & floor_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & floor_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & floor_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor floor_divide(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & floor_divide_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & floor_divide_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & floor_divide_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor floor_divide(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & floor_divide_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor frac(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & frac_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & frac_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & frac_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor full(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, const Scalar & fill_value, c10::optional<DimnameList> names, TensorOptions options={});
    TORCH_API Tensor full(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, const Scalar & fill_value, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor full(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, const Scalar & fill_value, TensorOptions options={});
    TORCH_API Tensor full(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, const Scalar & fill_value, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & full_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, IntArrayRef size, const Scalar & fill_value);
    TORCH_API Tensor & full_outf(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, const Scalar & fill_value, Tensor & out);
    TORCH_API Tensor full_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & fill_value, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor full_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & fill_value, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor from_file(c10::DispatchKeySet dispatchKeySet, std::string filename, c10::optional<bool> shared=c10::nullopt, c10::optional<int64_t> size=0, TensorOptions options={});
    TORCH_API Tensor from_file(c10::DispatchKeySet dispatchKeySet, std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & gcd_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & gcd_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor gcd(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & gcd_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & lcm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & lcm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor lcm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & lcm_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor grid_sampler(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
    TORCH_API Tensor grid_sampler_2d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
    TORCH_API std::tuple<Tensor,Tensor> grid_sampler_2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
    TORCH_API Tensor _grid_sampler_2d_cpu_fallback(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
    TORCH_API std::tuple<Tensor,Tensor> _grid_sampler_2d_cpu_fallback_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
    TORCH_API Tensor grid_sampler_3d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
    TORCH_API std::tuple<Tensor,Tensor> grid_sampler_3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
    TORCH_API Tensor hann_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, TensorOptions options={});
    TORCH_API Tensor hann_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor hann_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, TensorOptions options={});
    TORCH_API Tensor hann_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor hamming_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, TensorOptions options={});
    TORCH_API Tensor hamming_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor hamming_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, TensorOptions options={});
    TORCH_API Tensor hamming_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor hamming_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, double alpha, TensorOptions options={});
    TORCH_API Tensor hamming_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, double alpha, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor hamming_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, double alpha, double beta, TensorOptions options={});
    TORCH_API Tensor hamming_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, double alpha, double beta, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor kaiser_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, TensorOptions options={});
    TORCH_API Tensor kaiser_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor kaiser_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, TensorOptions options={});
    TORCH_API Tensor kaiser_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor kaiser_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, double beta, TensorOptions options={});
    TORCH_API Tensor kaiser_window(c10::DispatchKeySet dispatchKeySet, int64_t window_length, bool periodic, double beta, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor hinge_embedding_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, double margin=1.0, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor group_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, int64_t num_groups, const c10::optional<Tensor> & weight={}, const c10::optional<Tensor> & bias={}, double eps=1e-05, bool cudnn_enabled=true);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> native_group_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> native_group_norm_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, std::array<bool,3> output_mask);
    TORCH_API Tensor _fft_r2c(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, int64_t normalization, bool onesided);
    TORCH_API Tensor & _fft_r2c_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, int64_t normalization, bool onesided);
    TORCH_API Tensor & _fft_r2c_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, int64_t normalization, bool onesided, Tensor & out);
    TORCH_API Tensor _fft_c2r(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, int64_t normalization, int64_t last_dim_size);
    TORCH_API Tensor & _fft_c2r_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, int64_t normalization, int64_t last_dim_size);
    TORCH_API Tensor & _fft_c2r_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, int64_t normalization, int64_t last_dim_size, Tensor & out);
    TORCH_API Tensor _fft_c2c(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, int64_t normalization, bool forward);
    TORCH_API Tensor & _fft_c2c_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, int64_t normalization, bool forward);
    TORCH_API Tensor & _fft_c2c_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, int64_t normalization, bool forward, Tensor & out);
    TORCH_API int64_t _cufft_get_plan_cache_size(c10::DispatchKeySet dispatchKeySet, int64_t device_index);
    TORCH_API int64_t _cufft_get_plan_cache_max_size(c10::DispatchKeySet dispatchKeySet, int64_t device_index);
    TORCH_API void _cufft_set_plan_cache_max_size(c10::DispatchKeySet dispatchKeySet, int64_t device_index, int64_t max_size);
    TORCH_API void _cufft_clear_plan_cache(c10::DispatchKeySet dispatchKeySet, int64_t device_index);
    TORCH_API Tensor index(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::List<c10::optional<Tensor>> & indices);
    TORCH_API Tensor & index_copy_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
    TORCH_API Tensor index_copy(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
    TORCH_API Tensor & index_copy_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);
    TORCH_API Tensor index_copy(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);
    TORCH_API Tensor & index_put_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate=false);
    TORCH_API Tensor index_put(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate=false);
    TORCH_API Tensor & _index_put_impl_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate=false, bool unsafe=false);
    TORCH_API Tensor instance_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled);
    TORCH_API Tensor inverse(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & inverse_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & inverse_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor _inverse_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor isclose(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false);
    TORCH_API Tensor isnan(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API bool is_distributed(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API bool __dispatch_is_floating_point(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API bool __dispatch_is_complex(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor isreal(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API bool is_nonzero(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API bool is_same_size(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API bool __dispatch_is_signed(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor kl_div(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean, bool log_target=false);
    TORCH_API Tensor kl_div_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean, bool log_target=false);
    TORCH_API Tensor kron(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & kron_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & kron_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API std::tuple<Tensor,Tensor> kthvalue(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t k, int64_t dim=-1, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> kthvalue_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim=-1, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> kthvalue_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t k, int64_t dim, bool keepdim, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> kthvalue(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t k, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> kthvalue_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> kthvalue_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t k, Dimname dim, bool keepdim, Tensor & values, Tensor & indices);
    TORCH_API Tensor layer_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight={}, const c10::optional<Tensor> & bias={}, double eps=1e-05, bool cudnn_enable=true);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> native_layer_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_out, const Tensor & input, IntArrayRef normalized_shape, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, std::array<bool,3> output_mask);
    TORCH_API Tensor nan_to_num(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<double> nan=c10::nullopt, c10::optional<double> posinf=c10::nullopt, c10::optional<double> neginf=c10::nullopt);
    TORCH_API Tensor & nan_to_num_(c10::DispatchKeySet dispatchKeySet, Tensor & self, c10::optional<double> nan=c10::nullopt, c10::optional<double> posinf=c10::nullopt, c10::optional<double> neginf=c10::nullopt);
    TORCH_API Tensor & nan_to_num_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<double> nan=c10::nullopt, c10::optional<double> posinf=c10::nullopt, c10::optional<double> neginf=c10::nullopt);
    TORCH_API Tensor & nan_to_num_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf, Tensor & out);
    TORCH_API Tensor linear(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias={});
    TORCH_API Tensor mkldnn_linear(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias={});
    TORCH_API Tensor mkldnn_linear_backward_input(c10::DispatchKeySet dispatchKeySet, IntArrayRef input_size, const Tensor & grad_output, const Tensor & weight);
    TORCH_API std::tuple<Tensor,Tensor> mkldnn_linear_backward_weights(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & input, const Tensor & weight, bool bias_defined);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> mkldnn_linear_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grad_output, const Tensor & weight, std::array<bool,3> output_mask);
    TORCH_API Tensor fbgemm_linear_int8_weight_fp32_activation(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, const Scalar & weight_scale, const Scalar & weight_zero_point, const Tensor & bias);
    TORCH_API Tensor fbgemm_linear_int8_weight(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, const Scalar & weight_scale, const Scalar & weight_zero_point, const Tensor & bias);
    TORCH_API std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(c10::DispatchKeySet dispatchKeySet, const Tensor & input);
    TORCH_API Tensor fbgemm_pack_gemm_matrix_fp16(c10::DispatchKeySet dispatchKeySet, const Tensor & input);
    TORCH_API Tensor fbgemm_linear_fp16_weight_fp32_activation(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & packed_weight, const Tensor & bias);
    TORCH_API Tensor fbgemm_linear_fp16_weight(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & packed_weight, const Tensor & bias);
    TORCH_API Tensor fbgemm_pack_quantized_matrix(c10::DispatchKeySet dispatchKeySet, const Tensor & input);
    TORCH_API Tensor fbgemm_pack_quantized_matrix(c10::DispatchKeySet dispatchKeySet, const Tensor & input, int64_t K, int64_t N);
    TORCH_API Tensor ldexp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & ldexp_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & ldexp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & ldexp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor linspace(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps=c10::nullopt, TensorOptions options={});
    TORCH_API Tensor linspace(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & linspace_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps=c10::nullopt);
    TORCH_API Tensor & linspace_outf(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, Tensor & out);
    TORCH_API Tensor log(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & log_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & log_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & log_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor log10(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & log10_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & log10_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & log10_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor log1p(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & log1p_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & log1p_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & log1p_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor log2(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & log2_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & log2_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & log2_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor & logaddexp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & logaddexp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor logaddexp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & logaddexp2_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & logaddexp2_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor logaddexp2(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor xlogy(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor xlogy(c10::DispatchKeySet dispatchKeySet, const Scalar & self, const Tensor & other);
    TORCH_API Tensor xlogy(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & xlogy_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & xlogy_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & xlogy_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & xlogy_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor & xlogy_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Scalar & self, const Tensor & other);
    TORCH_API Tensor & xlogy_outf(c10::DispatchKeySet dispatchKeySet, const Scalar & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor & xlogy_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & xlogy_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor logdet(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor logspace(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps=c10::nullopt, double base=10.0, TensorOptions options={});
    TORCH_API Tensor logspace(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, double base, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & logspace_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps=c10::nullopt, double base=10.0);
    TORCH_API Tensor & logspace_outf(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, double base, Tensor & out);
    TORCH_API Tensor log_softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor log_softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor _log_softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool half_to_float);
    TORCH_API Tensor _log_softmax_backward_data(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
    TORCH_API Tensor _logcumsumexp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API Tensor & _logcumsumexp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim);
    TORCH_API Tensor & _logcumsumexp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, Tensor & out);
    TORCH_API Tensor logcumsumexp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API Tensor & logcumsumexp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim);
    TORCH_API Tensor & logcumsumexp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, Tensor & out);
    TORCH_API Tensor logcumsumexp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim);
    TORCH_API Tensor & logcumsumexp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, Dimname dim);
    TORCH_API Tensor & logcumsumexp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, Tensor & out);
    TORCH_API Tensor logsumexp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim=false);
    TORCH_API Tensor & logsumexp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false);
    TORCH_API Tensor & logsumexp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out);
    TORCH_API Tensor logsumexp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool keepdim=false);
    TORCH_API Tensor & logsumexp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, DimnameList dim, bool keepdim=false);
    TORCH_API Tensor & logsumexp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool keepdim, Tensor & out);
    TORCH_API Tensor margin_ranking_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & input1, const Tensor & input2, const Tensor & target, double margin=0.0, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor matmul(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & matmul_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & matmul_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor matrix_rank(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double tol, bool symmetric=false);
    TORCH_API Tensor matrix_rank(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool symmetric=false);
    TORCH_API Tensor matrix_power(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t n);
    TORCH_API Tensor matrix_exp(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor matrix_exp_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grad);
    TORCH_API std::tuple<Tensor,Tensor> _aminmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::tuple<Tensor,Tensor> _aminmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API Tensor _compute_linear_combination(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & coefficients);
    TORCH_API Tensor & _compute_linear_combination_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & input, const Tensor & coefficients);
    TORCH_API Tensor & _compute_linear_combination_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & coefficients, Tensor & out);
    TORCH_API std::tuple<Tensor,Tensor> max(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> max_out(c10::DispatchKeySet dispatchKeySet, Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> max_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim, Tensor & max, Tensor & max_values);
    TORCH_API std::tuple<Tensor,Tensor> max(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> max_out(c10::DispatchKeySet dispatchKeySet, Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> max_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim, Tensor & max, Tensor & max_values);
    TORCH_API Tensor value_selecting_reduction_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, int64_t dim, const Tensor & indices, IntArrayRef sizes, bool keepdim);
    TORCH_API Tensor amax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim={}, bool keepdim=false);
    TORCH_API Tensor & amax_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim={}, bool keepdim=false);
    TORCH_API Tensor & amax_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out);
    TORCH_API std::tuple<Tensor,Tensor> max_pool1d_with_indices(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor max_pool1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor max_pool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor mkldnn_max_pool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor mkldnn_max_pool2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output, const Tensor & input, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor mkldnn_max_pool3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor mkldnn_max_pool3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output, const Tensor & input, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor quantized_max_pool1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor quantized_max_pool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor max_pool3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor mean(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor mean(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & mean_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & mean_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor mean(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & mean_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & mean_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor median(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::tuple<Tensor,Tensor> median(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> median_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> median_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> median(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> median_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> median_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim, Tensor & values, Tensor & indices);
    TORCH_API Tensor nanmedian(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::tuple<Tensor,Tensor> nanmedian(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> nanmedian_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> nanmedian_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> nanmedian(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> nanmedian_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> nanmedian_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> min(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> min_out(c10::DispatchKeySet dispatchKeySet, Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> min_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim, Tensor & min, Tensor & min_indices);
    TORCH_API std::tuple<Tensor,Tensor> min(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> min_out(c10::DispatchKeySet dispatchKeySet, Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> min_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim, Tensor & min, Tensor & min_indices);
    TORCH_API Tensor amin(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim={}, bool keepdim=false);
    TORCH_API Tensor & amin_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim={}, bool keepdim=false);
    TORCH_API Tensor & amin_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out);
    TORCH_API Tensor mkldnn_convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups);
    TORCH_API Tensor mkldnn_convolution_backward_input(c10::DispatchKeySet dispatchKeySet, IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);
    TORCH_API std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(c10::DispatchKeySet dispatchKeySet, IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon);
    TORCH_API Tensor miopen_convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API Tensor miopen_convolution_backward_input(c10::DispatchKeySet dispatchKeySet, IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);
    TORCH_API Tensor miopen_convolution_backward_bias(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output);
    TORCH_API Tensor miopen_convolution_backward_weight(c10::DispatchKeySet dispatchKeySet, IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API Tensor miopen_convolution_transpose(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);
    TORCH_API Tensor miopen_convolution_transpose_backward_input(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API Tensor miopen_convolution_transpose_backward_weight(c10::DispatchKeySet dispatchKeySet, IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API Tensor miopen_depthwise_convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API Tensor miopen_depthwise_convolution_backward_input(c10::DispatchKeySet dispatchKeySet, IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_depthwise_convolution_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);
    TORCH_API Tensor miopen_depthwise_convolution_backward_weight(c10::DispatchKeySet dispatchKeySet, IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(c10::DispatchKeySet dispatchKeySet, const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask);
    TORCH_API Tensor mm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat2);
    TORCH_API Tensor & mm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & mat2);
    TORCH_API Tensor & mm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat2, Tensor & out);
    TORCH_API Tensor _sparse_mm(c10::DispatchKeySet dispatchKeySet, const Tensor & sparse, const Tensor & dense);
    TORCH_API Tensor _sparse_sparse_matmul(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor _sparse_mask_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & t, const Tensor & mask_indices);
    TORCH_API std::tuple<Tensor,Tensor> mode(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim=-1, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> mode_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t dim=-1, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> mode_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> mode(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> mode_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> mode_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim, Tensor & values, Tensor & indices);
    TORCH_API Tensor mul(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & mul_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & mul_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & mul_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor mul(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & mul_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor multiply(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & multiply_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & multiply_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & multiply_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor multiply(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & multiply_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor mv(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & vec);
    TORCH_API Tensor & mv_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & vec);
    TORCH_API Tensor & mv_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & vec, Tensor & out);
    TORCH_API Tensor mvlgamma(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t p);
    TORCH_API Tensor & mvlgamma_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t p);
    TORCH_API Tensor narrow_copy(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, int64_t start, int64_t length);
    TORCH_API Tensor & narrow_copy_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim, int64_t start, int64_t length);
    TORCH_API Tensor & narrow_copy_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, int64_t start, int64_t length, Tensor & out);
    TORCH_API Tensor narrow(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, int64_t start, int64_t length);
    TORCH_API Tensor narrow(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & start, int64_t length);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> native_batch_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, Tensor & save_mean, Tensor & save_invstd, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, Tensor & out, Tensor & save_mean, Tensor & save_invstd);
    TORCH_API std::tuple<Tensor,Tensor> batch_norm_stats(c10::DispatchKeySet dispatchKeySet, const Tensor & input, double eps);
    TORCH_API Tensor batch_norm_elemt(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps);
    TORCH_API Tensor & batch_norm_elemt_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps);
    TORCH_API Tensor & batch_norm_elemt_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps, Tensor & out);
    TORCH_API std::tuple<Tensor,Tensor> batch_norm_gather_stats(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, int64_t count);
    TORCH_API std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, const Tensor & counts);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_invstd, bool train, double eps, std::array<bool,3> output_mask);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, bool input_g, bool weight_g, bool bias_g);
    TORCH_API Tensor batch_norm_backward_elemt(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu, const Tensor & count);
    TORCH_API std::tuple<Tensor,Tensor> batch_norm_update_stats(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum);
    TORCH_API bool is_vulkan_available(c10::DispatchKeySet dispatchKeySet);
    TORCH_API bool _nnpack_available(c10::DispatchKeySet dispatchKeySet);
    TORCH_API Tensor _nnpack_spatial_convolution(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride=1);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask);
    TORCH_API Tensor _nnpack_spatial_convolution_backward_input(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding);
    TORCH_API Tensor _nnpack_spatial_convolution_backward_weight(c10::DispatchKeySet dispatchKeySet, const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding);
    TORCH_API Tensor ones(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options={});
    TORCH_API Tensor ones(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor ones(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor ones(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & ones_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, IntArrayRef size);
    TORCH_API Tensor & ones_outf(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, Tensor & out);
    TORCH_API Tensor ones_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor ones_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor pairwise_distance(c10::DispatchKeySet dispatchKeySet, const Tensor & x1, const Tensor & x2, double p=2, double eps=1e-06, bool keepdim=false);
    TORCH_API Tensor cdist(c10::DispatchKeySet dispatchKeySet, const Tensor & x1, const Tensor & x2, double p=2, c10::optional<int64_t> compute_mode=c10::nullopt);
    TORCH_API Tensor _euclidean_dist(c10::DispatchKeySet dispatchKeySet, const Tensor & x1, const Tensor & x2);
    TORCH_API Tensor _cdist_forward(c10::DispatchKeySet dispatchKeySet, const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode);
    TORCH_API Tensor _cdist_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist);
    TORCH_API Tensor pdist(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double p=2);
    TORCH_API Tensor _pdist_forward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double p=2);
    TORCH_API Tensor _pdist_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & self, double p, const Tensor & pdist);
    TORCH_API Tensor cosine_similarity(c10::DispatchKeySet dispatchKeySet, const Tensor & x1, const Tensor & x2, int64_t dim=1, double eps=1e-08);
    TORCH_API Tensor permute(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dims);
    TORCH_API Tensor movedim(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef source, IntArrayRef destination);
    TORCH_API Tensor movedim(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t source, int64_t destination);
    TORCH_API Tensor moveaxis(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef source, IntArrayRef destination);
    TORCH_API Tensor moveaxis(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t source, int64_t destination);
    TORCH_API Tensor numpy_T(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor pixel_shuffle(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t upscale_factor);
    TORCH_API Tensor pixel_unshuffle(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t downscale_factor);
    TORCH_API Tensor channel_shuffle(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t groups);
    TORCH_API bool is_pinned(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor pin_memory(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor pinverse(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double rcond=1e-15);
    TORCH_API Tensor poisson_nll_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction);
    TORCH_API Tensor rad2deg(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & rad2deg_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & rad2deg_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & rad2deg_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor deg2rad(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & deg2rad_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & deg2rad_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & deg2rad_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor scalar_tensor(c10::DispatchKeySet dispatchKeySet, const Scalar & s, TensorOptions options={});
    TORCH_API Tensor scalar_tensor(c10::DispatchKeySet dispatchKeySet, const Scalar & s, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor rand(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options={});
    TORCH_API Tensor rand(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor rand(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, TensorOptions options={});
    TORCH_API Tensor rand(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor rand(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor rand(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor rand(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, TensorOptions options={});
    TORCH_API Tensor rand(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & rand_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, IntArrayRef size);
    TORCH_API Tensor & rand_outf(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, Tensor & out);
    TORCH_API Tensor & rand_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, IntArrayRef size, c10::optional<Generator> generator);
    TORCH_API Tensor & rand_outf(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor rand_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor rand_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor randint(c10::DispatchKeySet dispatchKeySet, int64_t high, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor randint(c10::DispatchKeySet dispatchKeySet, int64_t high, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor randint(c10::DispatchKeySet dispatchKeySet, int64_t high, IntArrayRef size, c10::optional<Generator> generator, TensorOptions options={});
    TORCH_API Tensor randint(c10::DispatchKeySet dispatchKeySet, int64_t high, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor randint(c10::DispatchKeySet dispatchKeySet, int64_t low, int64_t high, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor randint(c10::DispatchKeySet dispatchKeySet, int64_t low, int64_t high, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor randint(c10::DispatchKeySet dispatchKeySet, int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, TensorOptions options={});
    TORCH_API Tensor randint(c10::DispatchKeySet dispatchKeySet, int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & randint_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t high, IntArrayRef size);
    TORCH_API Tensor & randint_outf(c10::DispatchKeySet dispatchKeySet, int64_t high, IntArrayRef size, Tensor & out);
    TORCH_API Tensor & randint_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t high, IntArrayRef size, c10::optional<Generator> generator);
    TORCH_API Tensor & randint_outf(c10::DispatchKeySet dispatchKeySet, int64_t high, IntArrayRef size, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor & randint_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t low, int64_t high, IntArrayRef size);
    TORCH_API Tensor & randint_outf(c10::DispatchKeySet dispatchKeySet, int64_t low, int64_t high, IntArrayRef size, Tensor & out);
    TORCH_API Tensor & randint_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator);
    TORCH_API Tensor & randint_outf(c10::DispatchKeySet dispatchKeySet, int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor randint_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t high, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor randint_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t high, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor randint_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t low, int64_t high, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor randint_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t low, int64_t high, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor randn(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor randn(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor randn(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, TensorOptions options={});
    TORCH_API Tensor randn(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor randn(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options={});
    TORCH_API Tensor randn(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor randn(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, TensorOptions options={});
    TORCH_API Tensor randn(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & randn_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, IntArrayRef size);
    TORCH_API Tensor & randn_outf(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, Tensor & out);
    TORCH_API Tensor & randn_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, IntArrayRef size, c10::optional<Generator> generator);
    TORCH_API Tensor & randn_outf(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor randn_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor randn_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor randperm(c10::DispatchKeySet dispatchKeySet, int64_t n, TensorOptions options={});
    TORCH_API Tensor randperm(c10::DispatchKeySet dispatchKeySet, int64_t n, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor randperm(c10::DispatchKeySet dispatchKeySet, int64_t n, c10::optional<Generator> generator, TensorOptions options={});
    TORCH_API Tensor randperm(c10::DispatchKeySet dispatchKeySet, int64_t n, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & randperm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t n);
    TORCH_API Tensor & randperm_outf(c10::DispatchKeySet dispatchKeySet, int64_t n, Tensor & out);
    TORCH_API Tensor & randperm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t n, c10::optional<Generator> generator);
    TORCH_API Tensor & randperm_outf(c10::DispatchKeySet dispatchKeySet, int64_t n, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor range(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, const Scalar & step=1, TensorOptions options={});
    TORCH_API Tensor range(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, const Scalar & step, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor range(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, TensorOptions options={});
    TORCH_API Tensor range(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & range_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Scalar & start, const Scalar & end, const Scalar & step=1);
    TORCH_API Tensor & range_outf(c10::DispatchKeySet dispatchKeySet, const Scalar & start, const Scalar & end, const Scalar & step, Tensor & out);
    TORCH_API Tensor ravel(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor reciprocal(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & reciprocal_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & reciprocal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & reciprocal_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor neg(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & neg_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & neg_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & neg_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor negative(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & negative_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & negative_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & negative_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor repeat(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef repeats);
    TORCH_API Tensor repeat_interleave(c10::DispatchKeySet dispatchKeySet, const Tensor & repeats);
    TORCH_API Tensor repeat_interleave(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim=c10::nullopt);
    TORCH_API Tensor repeat_interleave(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t repeats, c10::optional<int64_t> dim=c10::nullopt);
    TORCH_API Tensor reshape(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef shape);
    TORCH_API Tensor _mkldnn_reshape(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef shape);
    TORCH_API Tensor reshape_as(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor round(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & round_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & round_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & round_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor rrelu(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & lower=0.125, const Scalar & upper=0.3333333333333333, bool training=false, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & rrelu_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & lower=0.125, const Scalar & upper=0.3333333333333333, bool training=false, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor relu(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & relu_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor relu6(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & relu6_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor prelu(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight);
    TORCH_API std::tuple<Tensor,Tensor> prelu_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight);
    TORCH_API Tensor gelu(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor gelu_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & self);
    TORCH_API Tensor infinitely_differentiable_gelu_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & self);
    TORCH_API Tensor hardshrink(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & lambd=0.5);
    TORCH_API Tensor hardshrink_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_out, const Tensor & self, const Scalar & lambd);
    TORCH_API Tensor rsqrt(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & rsqrt_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & rsqrt_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & rsqrt_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor select(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, int64_t index);
    TORCH_API Tensor select(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, int64_t index);
    TORCH_API Tensor select_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, IntArrayRef input_sizes, int64_t dim, int64_t index);
    TORCH_API Tensor selu(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & selu_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor celu(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & alpha=1.0);
    TORCH_API Tensor & celu_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & alpha=1.0);
    TORCH_API Tensor silu(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & silu_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & silu_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & silu_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor silu_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self);
    TORCH_API Tensor sigmoid(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & sigmoid_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & sigmoid_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & sigmoid_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor logit(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<double> eps=c10::nullopt);
    TORCH_API Tensor & logit_(c10::DispatchKeySet dispatchKeySet, Tensor & self, c10::optional<double> eps=c10::nullopt);
    TORCH_API Tensor & logit_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<double> eps=c10::nullopt);
    TORCH_API Tensor & logit_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<double> eps, Tensor & out);
    TORCH_API Tensor sin(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & sin_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & sin_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & sin_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor sinc(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & sinc_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & sinc_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & sinc_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor sinh(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & sinh_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & sinh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & sinh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor detach(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & detach_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API int64_t __dispatch_size(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API int64_t size(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim);
    TORCH_API Tensor slice(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim=0, c10::optional<int64_t> start=0, c10::optional<int64_t> end=9223372036854775807, int64_t step=1);
    TORCH_API Tensor slice_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, IntArrayRef input_sizes, int64_t dim, int64_t start, int64_t end, int64_t step);
    TORCH_API std::tuple<Tensor,Tensor> slogdet(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor smm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat2);
    TORCH_API Tensor softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor _softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool half_to_float);
    TORCH_API Tensor _softmax_backward_data(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
    TORCH_API std::vector<Tensor> unsafe_split(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t split_size, int64_t dim=0);
    TORCH_API std::vector<Tensor> split(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t split_size, int64_t dim=0);
    TORCH_API std::vector<Tensor> unsafe_split_with_sizes(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef split_sizes, int64_t dim=0);
    TORCH_API std::vector<Tensor> split_with_sizes(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef split_sizes, int64_t dim=0);
    TORCH_API Tensor squeeze(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor squeeze(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API Tensor squeeze(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim);
    TORCH_API Tensor & squeeze_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & squeeze_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim);
    TORCH_API Tensor & squeeze_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Dimname dim);
    TORCH_API Tensor sspaddmm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & sspaddmm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & sspaddmm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor stack(c10::DispatchKeySet dispatchKeySet, TensorList tensors, int64_t dim=0);
    TORCH_API Tensor & stack_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors, int64_t dim=0);
    TORCH_API Tensor & stack_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, int64_t dim, Tensor & out);
    TORCH_API Tensor _stack(c10::DispatchKeySet dispatchKeySet, TensorList tensors, int64_t dim=0);
    TORCH_API Tensor & _stack_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors, int64_t dim=0);
    TORCH_API Tensor & _stack_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, int64_t dim, Tensor & out);
    TORCH_API Tensor hstack(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor & hstack_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors);
    TORCH_API Tensor & hstack_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, Tensor & out);
    TORCH_API Tensor vstack(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor & vstack_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors);
    TORCH_API Tensor & vstack_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, Tensor & out);
    TORCH_API Tensor dstack(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor & dstack_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors);
    TORCH_API Tensor & dstack_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, Tensor & out);
    TORCH_API Tensor stft(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length=c10::nullopt, c10::optional<int64_t> win_length=c10::nullopt, const c10::optional<Tensor> & window={}, bool normalized=false, c10::optional<bool> onesided=c10::nullopt, c10::optional<bool> return_complex=c10::nullopt);
    TORCH_API Tensor istft(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length=c10::nullopt, c10::optional<int64_t> win_length=c10::nullopt, const c10::optional<Tensor> & window={}, bool center=true, bool normalized=false, c10::optional<bool> onesided=c10::nullopt, c10::optional<int64_t> length=c10::nullopt, bool return_complex=false);
    TORCH_API int64_t __dispatch_stride(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API int64_t stride(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim);
    TORCH_API Tensor sum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor sum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor sum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & sum_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & sum_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor & sum_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & sum_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor nansum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor nansum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & nansum_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & nansum_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor sum_to_size(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size);
    TORCH_API Tensor sqrt(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & sqrt_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & sqrt_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & sqrt_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor square(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & square_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor std(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool unbiased=true);
    TORCH_API Tensor std(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
    TORCH_API std::tuple<Tensor,Tensor> std_mean(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool unbiased=true);
    TORCH_API std::tuple<Tensor,Tensor> std_mean(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
    TORCH_API std::tuple<Tensor,Tensor> std_mean(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);
    TORCH_API Tensor & std_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
    TORCH_API Tensor & std_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim, Tensor & out);
    TORCH_API Tensor std(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);
    TORCH_API Tensor & std_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);
    TORCH_API Tensor & std_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim, Tensor & out);
    TORCH_API Tensor prod(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor prod(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & prod_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & prod_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor prod(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & prod_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, Dimname dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & prod_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor t(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & t_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor tan(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & tan_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & tan_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & tan_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor tanh(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & tanh_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & tanh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & tanh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor tensordot(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other);
    TORCH_API Tensor & tensordot_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other);
    TORCH_API Tensor & tensordot_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other, Tensor & out);
    TORCH_API Tensor threshold(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & threshold, const Scalar & value);
    TORCH_API Tensor & threshold_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & threshold, const Scalar & value);
    TORCH_API Tensor & threshold_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & threshold, const Scalar & value);
    TORCH_API Tensor & threshold_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & threshold, const Scalar & value, Tensor & out);
    TORCH_API Tensor threshold_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Scalar & threshold);
    TORCH_API Tensor tile(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dims);
    TORCH_API Tensor transpose(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim0, int64_t dim1);
    TORCH_API Tensor transpose(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim0, Dimname dim1);
    TORCH_API Tensor _mkldnn_transpose(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim0, int64_t dim1);
    TORCH_API Tensor & transpose_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim0, int64_t dim1);
    TORCH_API Tensor & _mkldnn_transpose_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim0, int64_t dim1);
    TORCH_API Tensor one_hot(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t num_classes=-1);
    TORCH_API Tensor flip(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dims);
    TORCH_API Tensor fliplr(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor flipud(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor roll(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef shifts, IntArrayRef dims={});
    TORCH_API Tensor rot90(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t k=1, IntArrayRef dims={0,1});
    TORCH_API Tensor trapz(c10::DispatchKeySet dispatchKeySet, const Tensor & y, const Tensor & x, int64_t dim=-1);
    TORCH_API Tensor trapz(c10::DispatchKeySet dispatchKeySet, const Tensor & y, double dx=1, int64_t dim=-1);
    TORCH_API Tensor _trilinear(c10::DispatchKeySet dispatchKeySet, const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim=1);
    TORCH_API Tensor triplet_margin_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin=1.0, double p=2, double eps=1e-06, bool swap=false, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor trunc(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & trunc_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & trunc_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & trunc_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor fix(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & fix_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & fix_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & fix_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor type_as(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API bool _has_compatible_shallow_copy_type(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & from);
    TORCH_API std::tuple<Tensor,Tensor> _unique(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool sorted=true, bool return_inverse=false);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> unique_dim(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool sorted=true, bool return_inverse=false, bool return_counts=false);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> unique_consecutive(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool return_inverse=false, bool return_counts=false, c10::optional<int64_t> dim=c10::nullopt);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool return_inverse=false, bool return_counts=false);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _unique2(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool sorted=true, bool return_inverse=false, bool return_counts=false);
    TORCH_API Tensor _unsafe_view(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size);
    TORCH_API Tensor unsqueeze(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API Tensor & unsqueeze_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim);
    TORCH_API Tensor vander(c10::DispatchKeySet dispatchKeySet, const Tensor & x, c10::optional<int64_t> N=c10::nullopt, bool increasing=false);
    TORCH_API Tensor var(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool unbiased=true);
    TORCH_API Tensor var(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
    TORCH_API Tensor & var_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
    TORCH_API Tensor & var_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim, Tensor & out);
    TORCH_API Tensor var(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);
    TORCH_API Tensor & var_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);
    TORCH_API Tensor & var_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim, Tensor & out);
    TORCH_API std::tuple<Tensor,Tensor> var_mean(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool unbiased=true);
    TORCH_API std::tuple<Tensor,Tensor> var_mean(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
    TORCH_API std::tuple<Tensor,Tensor> var_mean(c10::DispatchKeySet dispatchKeySet, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);
    TORCH_API Tensor view_as(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor where(c10::DispatchKeySet dispatchKeySet, const Tensor & condition, const Tensor & self, const Tensor & other);
    TORCH_API Tensor where(c10::DispatchKeySet dispatchKeySet, const Tensor & condition, const Scalar & self, const Tensor & other);
    TORCH_API Tensor where(c10::DispatchKeySet dispatchKeySet, const Tensor & condition, const Tensor & self, const Scalar & other);
    TORCH_API Tensor where(c10::DispatchKeySet dispatchKeySet, const Tensor & condition, const Scalar & self, const Scalar & other);
    TORCH_API std::vector<Tensor> where(c10::DispatchKeySet dispatchKeySet, const Tensor & condition);
    TORCH_API Tensor _s_where(c10::DispatchKeySet dispatchKeySet, const Tensor & condition, const Tensor & self, const Tensor & other);
    TORCH_API Tensor norm_except_dim(c10::DispatchKeySet dispatchKeySet, const Tensor & v, int64_t pow=2, int64_t dim=0);
    TORCH_API Tensor _weight_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & v, const Tensor & g, int64_t dim=0);
    TORCH_API std::tuple<Tensor,Tensor> _weight_norm_cuda_interface(c10::DispatchKeySet dispatchKeySet, const Tensor & v, const Tensor & g, int64_t dim=0);
    TORCH_API std::tuple<Tensor,Tensor> _weight_norm_cuda_interface_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);
    TORCH_API std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);
    TORCH_API Tensor zeros(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options={});
    TORCH_API Tensor zeros(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor zeros(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor zeros(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & zeros_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, IntArrayRef size);
    TORCH_API Tensor & zeros_outf(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, Tensor & out);
    TORCH_API Tensor zeros_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor zeros_like(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor _standard_gamma_grad(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & output);
    TORCH_API Tensor _standard_gamma(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor _dirichlet_grad(c10::DispatchKeySet dispatchKeySet, const Tensor & x, const Tensor & alpha, const Tensor & total);
    TORCH_API Tensor _sample_dirichlet(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor poisson(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor binomial(c10::DispatchKeySet dispatchKeySet, const Tensor & count, const Tensor & prob, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor native_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & p=2);
    TORCH_API Tensor native_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);
    TORCH_API Tensor _sparse_sum(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor _sparse_sum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, ScalarType dtype);
    TORCH_API Tensor _sparse_sum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim);
    TORCH_API Tensor _sparse_sum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, ScalarType dtype);
    TORCH_API Tensor _sparse_sum_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & self, IntArrayRef dim);
    TORCH_API Tensor _sparse_softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor _sparse_softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor _sparse_softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool half_to_float);
    TORCH_API Tensor _sparse_softmax_backward_data(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
    TORCH_API Tensor _sparse_log_softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor _sparse_log_softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor _sparse_log_softmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool half_to_float);
    TORCH_API Tensor _sparse_log_softmax_backward_data(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
    TORCH_API Tensor norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, ScalarType dtype);
    TORCH_API Tensor norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & p=2);
    TORCH_API Tensor norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, ScalarType dtype);
    TORCH_API Tensor norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim=false);
    TORCH_API Tensor & norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, ScalarType dtype);
    TORCH_API Tensor & norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, ScalarType dtype, Tensor & out);
    TORCH_API Tensor & norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim=false);
    TORCH_API Tensor & norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, Tensor & out);
    TORCH_API Tensor norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, DimnameList dim, bool keepdim, ScalarType dtype);
    TORCH_API Tensor norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, DimnameList dim, bool keepdim=false);
    TORCH_API Tensor & norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const c10::optional<Scalar> & p, DimnameList dim, bool keepdim, ScalarType dtype);
    TORCH_API Tensor & norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, DimnameList dim, bool keepdim, ScalarType dtype, Tensor & out);
    TORCH_API Tensor & norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const c10::optional<Scalar> & p, DimnameList dim, bool keepdim=false);
    TORCH_API Tensor & norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, DimnameList dim, bool keepdim, Tensor & out);
    TORCH_API std::tuple<Tensor,Tensor> frexp(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::tuple<Tensor &,Tensor &> frexp_out(c10::DispatchKeySet dispatchKeySet, Tensor & mantissa, Tensor & exponent, const Tensor & self);
    TORCH_API std::tuple<Tensor &,Tensor &> frexp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & mantissa, Tensor & exponent);
    TORCH_API Tensor frobenius_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor frobenius_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim=false);
    TORCH_API Tensor & frobenius_norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false);
    TORCH_API Tensor & frobenius_norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out);
    TORCH_API Tensor nuclear_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool keepdim=false);
    TORCH_API Tensor & nuclear_norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, bool keepdim=false);
    TORCH_API Tensor & nuclear_norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool keepdim, Tensor & out);
    TORCH_API Tensor nuclear_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim=false);
    TORCH_API Tensor & nuclear_norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false);
    TORCH_API Tensor & nuclear_norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out);
    TORCH_API Tensor clone(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor & resize_as_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & the_template, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor & zero_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & sub_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & sub_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor sub(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & sub_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor sub(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, const Scalar & alpha=1);
    TORCH_API Tensor & sub_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other, const Scalar & alpha=1);
    TORCH_API Tensor & subtract_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & subtract_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor subtract(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & subtract_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor subtract(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, const Scalar & alpha=1);
    TORCH_API Tensor & subtract_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other, const Scalar & alpha=1);
    TORCH_API Tensor rsub(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor & heaviside_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & values);
    TORCH_API Tensor & heaviside_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & values, Tensor & out);
    TORCH_API Tensor heaviside(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & values);
    TORCH_API Tensor & heaviside_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & values);
    TORCH_API Tensor rsub(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, const Scalar & alpha=1);
    TORCH_API Tensor _sparse_addmm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & sparse, const Tensor & dense, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addmm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addmm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor addmm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addmm_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor sparse_coo_tensor(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, TensorOptions options);
    TORCH_API Tensor sparse_coo_tensor(c10::DispatchKeySet dispatchKeySet, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor sparse_coo_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & indices, const Tensor & values, TensorOptions options={});
    TORCH_API Tensor sparse_coo_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & indices, const Tensor & values, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor sparse_coo_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & indices, const Tensor & values, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor sparse_coo_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & indices, const Tensor & values, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor _sparse_coo_tensor_unsafe(c10::DispatchKeySet dispatchKeySet, const Tensor & indices, const Tensor & values, IntArrayRef size, TensorOptions options={});
    TORCH_API Tensor _sparse_coo_tensor_unsafe(c10::DispatchKeySet dispatchKeySet, const Tensor & indices, const Tensor & values, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API void _validate_sparse_coo_tensor_args(c10::DispatchKeySet dispatchKeySet, const Tensor & indices, const Tensor & values, IntArrayRef size);
    TORCH_API Tensor _sparse_coo_tensor_with_dims(c10::DispatchKeySet dispatchKeySet, int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, TensorOptions options);
    TORCH_API Tensor _sparse_coo_tensor_with_dims(c10::DispatchKeySet dispatchKeySet, int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor _sparse_coo_tensor_with_dims_and_tensors(c10::DispatchKeySet dispatchKeySet, int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, TensorOptions options);
    TORCH_API Tensor _sparse_coo_tensor_with_dims_and_tensors(c10::DispatchKeySet dispatchKeySet, int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & sparse_resize_(c10::DispatchKeySet dispatchKeySet, Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim);
    TORCH_API Tensor & sparse_resize_and_clear_(c10::DispatchKeySet dispatchKeySet, Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim);
    TORCH_API Tensor sparse_mask(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mask);
    TORCH_API Tensor to_dense(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor to_dense_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & input);
    TORCH_API int64_t sparse_dim(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API int64_t _dimI(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API int64_t dense_dim(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API int64_t _dimV(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API int64_t _nnz(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor coalesce(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API bool is_coalesced(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor _indices(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor _values(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & _coalesced_(c10::DispatchKeySet dispatchKeySet, Tensor & self, bool coalesced);
    TORCH_API Tensor indices(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor values(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & hspmm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & mat1, const Tensor & mat2);
    TORCH_API Tensor & hspmm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & mat1, const Tensor & mat2, Tensor & out);
    TORCH_API Tensor hspmm(c10::DispatchKeySet dispatchKeySet, const Tensor & mat1, const Tensor & mat2);
    TORCH_API Tensor & copy_sparse_to_sparse_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & src, bool non_blocking=false);
    TORCH_API std::vector<Tensor> unbind(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim=0);
    TORCH_API std::vector<Tensor> unbind(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim);
    TORCH_API Tensor to_sparse(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t sparse_dim);
    TORCH_API Tensor to_sparse(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor to_mkldnn(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor mkldnn_reorder_conv2d_weight(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding=0, IntArrayRef stride=1, IntArrayRef dilation=1, int64_t groups=1);
    TORCH_API Tensor mkldnn_reorder_conv3d_weight(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding=0, IntArrayRef stride=1, IntArrayRef dilation=1, int64_t groups=1);
    TORCH_API Tensor to_mkldnn_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & input);
    TORCH_API Tensor quantize_per_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double scale, int64_t zero_point, ScalarType dtype);
    TORCH_API std::vector<Tensor> quantize_per_tensor(c10::DispatchKeySet dispatchKeySet, TensorList tensors, const Tensor & scales, const Tensor & zero_points, ScalarType dtype);
    TORCH_API Tensor quantize_per_channel(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & scales, const Tensor & zero_points, int64_t axis, ScalarType dtype);
    TORCH_API Tensor dequantize(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::vector<Tensor> dequantize(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API double q_scale(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API int64_t q_zero_point(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor q_per_channel_scales(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor q_per_channel_zero_points(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API int64_t q_per_channel_axis(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor int_repr(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor _make_per_tensor_quantized_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double scale, int64_t zero_point);
    TORCH_API Tensor _make_per_channel_quantized_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis);
    TORCH_API QScheme qscheme(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor fake_quantize_per_tensor_affine(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
    TORCH_API std::tuple<Tensor,Tensor> fake_quantize_per_tensor_affine_cachemask(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
    TORCH_API Tensor fake_quantize_per_tensor_affine_cachemask_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & mask);
    TORCH_API Tensor _fake_quantize_learnable_per_tensor_affine(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t quant_min, int64_t quant_max, double grad_factor=1.0);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _fake_quantize_learnable_per_tensor_affine_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t quant_min, int64_t quant_max, double grad_factor=1.0);
    TORCH_API Tensor fake_quantize_per_channel_affine(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
    TORCH_API std::tuple<Tensor,Tensor> fake_quantize_per_channel_affine_cachemask(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
    TORCH_API Tensor fake_quantize_per_channel_affine_cachemask_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & mask);
    TORCH_API Tensor _fake_quantize_learnable_per_channel_affine(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor=1.0);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _fake_quantize_learnable_per_channel_affine_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor=1.0);
    TORCH_API std::tuple<double,int64_t> _choose_qparams_per_tensor(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool reduce_range=false);
    TORCH_API Tensor _saturate_weight_to_fp16(c10::DispatchKeySet dispatchKeySet, const Tensor & weight);
    TORCH_API std::tuple<Tensor,Tensor> choose_qparams_optimized(c10::DispatchKeySet dispatchKeySet, const Tensor & input, int64_t numel, int64_t n_bins, double ratio, int64_t bit_width);
    TORCH_API Tensor to(c10::DispatchKeySet dispatchKeySet, const Tensor & self, TensorOptions options={}, bool non_blocking=false, bool copy=false, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor to(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format);
    TORCH_API Tensor to(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Device device, ScalarType dtype, bool non_blocking=false, bool copy=false, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor to(c10::DispatchKeySet dispatchKeySet, const Tensor & self, ScalarType dtype, bool non_blocking=false, bool copy=false, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API Tensor to(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, bool non_blocking=false, bool copy=false, c10::optional<MemoryFormat> memory_format=c10::nullopt);
    TORCH_API std::vector<Tensor> meshgrid(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor cartesian_prod(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor combinations(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t r=2, bool with_replacement=false);
    TORCH_API Scalar item(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API ScalarType result_type(c10::DispatchKeySet dispatchKeySet, const Tensor & tensor, const Tensor & other);
    TORCH_API ScalarType result_type(c10::DispatchKeySet dispatchKeySet, const Tensor & tensor, const Scalar & other);
    TORCH_API ScalarType result_type(c10::DispatchKeySet dispatchKeySet, const Scalar & scalar, const Tensor & tensor);
    TORCH_API ScalarType result_type(c10::DispatchKeySet dispatchKeySet, const Scalar & scalar1, const Scalar & scalar2);
    TORCH_API bool can_cast(c10::DispatchKeySet dispatchKeySet, ScalarType from, ScalarType to);
    TORCH_API ScalarType promote_types(c10::DispatchKeySet dispatchKeySet, ScalarType type1, ScalarType type2);
    TORCH_API Scalar _local_scalar_dense(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const c10::optional<Tensor> & input_bias={}, const c10::optional<Tensor> & hidden_bias={});
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(c10::DispatchKeySet dispatchKeySet, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(c10::DispatchKeySet dispatchKeySet, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias, const Tensor & cx, const Tensor & cy);
    TORCH_API std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias={}, const c10::optional<Tensor> & hidden_bias={});
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_hy, const Tensor & workspace, bool has_bias);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> lstm(c10::DispatchKeySet dispatchKeySet, const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> lstm(c10::DispatchKeySet dispatchKeySet, const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
    TORCH_API std::tuple<Tensor,Tensor> gru(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
    TORCH_API std::tuple<Tensor,Tensor> gru(c10::DispatchKeySet dispatchKeySet, const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
    TORCH_API std::tuple<Tensor,Tensor> rnn_tanh(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
    TORCH_API std::tuple<Tensor,Tensor> rnn_tanh(c10::DispatchKeySet dispatchKeySet, const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
    TORCH_API std::tuple<Tensor,Tensor> rnn_relu(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
    TORCH_API std::tuple<Tensor,Tensor> rnn_relu(c10::DispatchKeySet dispatchKeySet, const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
    TORCH_API std::tuple<Tensor,Tensor> lstm_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih={}, const c10::optional<Tensor> & b_hh={});
    TORCH_API Tensor gru_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih={}, const c10::optional<Tensor> & b_hh={});
    TORCH_API Tensor rnn_tanh_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih={}, const c10::optional<Tensor> & b_hh={});
    TORCH_API Tensor rnn_relu_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih={}, const c10::optional<Tensor> & b_hh={});
    TORCH_API std::tuple<Tensor,Tensor> quantized_lstm_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, const Scalar & scale_ih, const Scalar & scale_hh, const Scalar & zero_point_ih, const Scalar & zero_point_hh);
    TORCH_API Tensor quantized_gru_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, const Scalar & scale_ih, const Scalar & scale_hh, const Scalar & zero_point_ih, const Scalar & zero_point_hh);
    TORCH_API Tensor quantized_rnn_relu_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, const Scalar & scale_ih, const Scalar & scale_hh, const Scalar & zero_point_ih, const Scalar & zero_point_hh);
    TORCH_API Tensor quantized_rnn_tanh_cell(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, const Scalar & scale_ih, const Scalar & scale_hh, const Scalar & zero_point_ih, const Scalar & zero_point_hh);
    TORCH_API std::tuple<Tensor,Tensor> _pack_padded_sequence(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & lengths, bool batch_first);
    TORCH_API Tensor _pack_padded_sequence_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first);
    TORCH_API std::tuple<Tensor,Tensor> _pad_packed_sequence(c10::DispatchKeySet dispatchKeySet, const Tensor & data, const Tensor & batch_sizes, bool batch_first, const Scalar & padding_value, int64_t total_length);
    TORCH_API Tensor & set_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Storage source);
    TORCH_API Tensor & set_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride={});
    TORCH_API Tensor & set_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & source);
    TORCH_API Tensor & set_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API bool is_set_to(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & tensor);
    TORCH_API Tensor & masked_fill_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & mask, const Scalar & value);
    TORCH_API Tensor masked_fill(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mask, const Scalar & value);
    TORCH_API Tensor & masked_fill_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & mask, const Tensor & value);
    TORCH_API Tensor masked_fill(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mask, const Tensor & value);
    TORCH_API Tensor & masked_scatter_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & mask, const Tensor & source);
    TORCH_API Tensor masked_scatter(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mask, const Tensor & source);
    TORCH_API Tensor view(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef size);
    TORCH_API Tensor view(c10::DispatchKeySet dispatchKeySet, const Tensor & self, ScalarType dtype);
    TORCH_API Tensor & put_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & index, const Tensor & source, bool accumulate=false);
    TORCH_API Tensor & index_add_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
    TORCH_API Tensor index_add(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
    TORCH_API Tensor index_add(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);
    TORCH_API Tensor & index_fill_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Scalar & value);
    TORCH_API Tensor index_fill(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, const Scalar & value);
    TORCH_API Tensor & index_fill_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Tensor & value);
    TORCH_API Tensor index_fill(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value);
    TORCH_API Tensor & index_fill_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Dimname dim, const Tensor & index, const Scalar & value);
    TORCH_API Tensor & index_fill_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Dimname dim, const Tensor & index, const Tensor & value);
    TORCH_API Tensor index_fill(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, const Scalar & value);
    TORCH_API Tensor index_fill(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value);
    TORCH_API Tensor & scatter_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);
    TORCH_API Tensor scatter(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);
    TORCH_API Tensor & scatter_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Scalar & value);
    TORCH_API Tensor scatter(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, const Scalar & value);
    TORCH_API Tensor scatter(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src);
    TORCH_API Tensor scatter(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, const Scalar & value);
    TORCH_API Tensor & scatter_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Tensor & src, std::string reduce);
    TORCH_API Tensor & scatter_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Scalar & value, std::string reduce);
    TORCH_API Tensor & scatter_add_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);
    TORCH_API Tensor scatter_add(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);
    TORCH_API Tensor scatter_add(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src);
    TORCH_API Tensor & eq_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & eq_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & bitwise_and_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & bitwise_and_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor & bitwise_and_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & bitwise_and_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor bitwise_and(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor bitwise_and(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & bitwise_and_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & bitwise_and_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor __and__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor __and__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & __iand__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & __iand__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & bitwise_or_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & bitwise_or_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor & bitwise_or_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & bitwise_or_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor bitwise_or(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor bitwise_or(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & bitwise_or_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & bitwise_or_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor __or__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor __or__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & __ior__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & __ior__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & bitwise_xor_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & bitwise_xor_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor & bitwise_xor_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & bitwise_xor_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor bitwise_xor(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor bitwise_xor(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & bitwise_xor_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & bitwise_xor_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor __xor__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor __xor__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & __ixor__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & __ixor__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor __lshift__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor __lshift__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & __ilshift__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & __ilshift__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor __rshift__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor __rshift__(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & __irshift__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & __irshift__(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & atan2_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & tril_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t diagonal=0);
    TORCH_API Tensor & triu_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t diagonal=0);
    TORCH_API Tensor & digamma_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & polygamma_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t n);
    TORCH_API Tensor & renorm_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & p, int64_t dim, const Scalar & maxnorm);
    TORCH_API Tensor & lerp_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & end, const Scalar & weight);
    TORCH_API Tensor & lerp_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & end, const Tensor & weight);
    TORCH_API Tensor & fmod_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & fmod_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & remainder_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & remainder_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & addbmm_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addbmm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addbmm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha, Tensor & out);
    TORCH_API Tensor addbmm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta=1, const Scalar & alpha=1);
    TORCH_API Tensor & addcdiv_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value=1);
    TORCH_API Tensor & random_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & random_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t to, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & random_(c10::DispatchKeySet dispatchKeySet, Tensor & self, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & uniform_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double from=0, double to=1, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & cauchy_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double median=0, double sigma=1, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & log_normal_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double mean=1, double std=2, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & exponential_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double lambd=1, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & geometric_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double p, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & diag_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t diagonal=0);
    TORCH_API Tensor & diag_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t diagonal, Tensor & out);
    TORCH_API Tensor diag(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t diagonal=0);
    TORCH_API Tensor diag_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, IntArrayRef input_sizes, int64_t diagonal);
    TORCH_API Tensor & cross_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim=c10::nullopt);
    TORCH_API Tensor & cross_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim, Tensor & out);
    TORCH_API Tensor cross(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim=c10::nullopt);
    TORCH_API Tensor & triu_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t diagonal=0);
    TORCH_API Tensor & triu_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t diagonal, Tensor & out);
    TORCH_API Tensor triu(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t diagonal=0);
    TORCH_API Tensor & tril_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t diagonal=0);
    TORCH_API Tensor & tril_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t diagonal, Tensor & out);
    TORCH_API Tensor tril(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t diagonal=0);
    TORCH_API Tensor tril_indices(c10::DispatchKeySet dispatchKeySet, int64_t row, int64_t col, int64_t offset=0, TensorOptions options=at::kLong);
    TORCH_API Tensor tril_indices(c10::DispatchKeySet dispatchKeySet, int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor triu_indices(c10::DispatchKeySet dispatchKeySet, int64_t row, int64_t col, int64_t offset=0, TensorOptions options=at::kLong);
    TORCH_API Tensor triu_indices(c10::DispatchKeySet dispatchKeySet, int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor trace(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor trace_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, IntArrayRef sizes);
    TORCH_API Tensor & ne_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & ne_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor ne(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & ne_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & ne_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor ne(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & ne_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & ne_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & not_equal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & not_equal_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor not_equal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & not_equal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & not_equal_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor not_equal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & not_equal_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & not_equal_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & eq_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & eq_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor eq(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & eq_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & eq_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor eq(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & ge_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & ge_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor ge(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & ge_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & ge_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor ge(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & ge_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & ge_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & greater_equal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & greater_equal_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor greater_equal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & greater_equal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & greater_equal_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor greater_equal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & greater_equal_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & greater_equal_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & le_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & le_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor le(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & le_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & le_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor le(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & le_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & le_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & less_equal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & less_equal_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor less_equal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & less_equal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & less_equal_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor less_equal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & less_equal_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & less_equal_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & gt_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & gt_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor gt(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & gt_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & gt_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor gt(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & gt_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & gt_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & greater_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & greater_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor greater(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & greater_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & greater_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor greater(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & greater_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & greater_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & lt_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & lt_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor lt(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & lt_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & lt_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor lt(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & lt_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & lt_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & less_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & less_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor less(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & less_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & less_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor less(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & less_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & other);
    TORCH_API Tensor & less_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & take_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & index);
    TORCH_API Tensor & take_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & index, Tensor & out);
    TORCH_API Tensor take(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & index);
    TORCH_API Tensor take_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & input, const Tensor & index);
    TORCH_API Tensor & index_select_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim, const Tensor & index);
    TORCH_API Tensor & index_select_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, Tensor & out);
    TORCH_API Tensor index_select(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index);
    TORCH_API Tensor & index_select_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, Dimname dim, const Tensor & index);
    TORCH_API Tensor & index_select_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, Tensor & out);
    TORCH_API Tensor index_select(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index);
    TORCH_API Tensor index_select_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, IntArrayRef self_sizes, int64_t dim, const Tensor & index);
    TORCH_API Tensor & masked_select_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & mask);
    TORCH_API Tensor & masked_select_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mask, Tensor & out);
    TORCH_API Tensor masked_select(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & mask);
    TORCH_API Tensor masked_select_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & input, const Tensor & mask);
    TORCH_API Tensor & nonzero_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & nonzero_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor nonzero(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::vector<Tensor> nonzero_numpy(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & gather_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);
    TORCH_API Tensor & gather_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad, Tensor & out);
    TORCH_API Tensor gather(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);
    TORCH_API Tensor gather_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad);
    TORCH_API Tensor & gather_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad=false);
    TORCH_API Tensor & gather_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad, Tensor & out);
    TORCH_API Tensor gather(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad=false);
    TORCH_API Tensor _gather_sparse_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad);
    TORCH_API Tensor & addcmul_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value=1);
    TORCH_API Tensor & addcmul_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value, Tensor & out);
    TORCH_API Tensor addcmul(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value=1);
    TORCH_API Tensor & addcmul_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value=1);
    TORCH_API Tensor & addcdiv_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value=1);
    TORCH_API Tensor & addcdiv_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value, Tensor & out);
    TORCH_API Tensor addcdiv(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value=1);
    TORCH_API std::tuple<Tensor &,Tensor &> lstsq_out(c10::DispatchKeySet dispatchKeySet, Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A);
    TORCH_API std::tuple<Tensor &,Tensor &> lstsq_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & A, Tensor & X, Tensor & qr);
    TORCH_API std::tuple<Tensor,Tensor> lstsq(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & A);
    TORCH_API std::tuple<Tensor &,Tensor &> triangular_solve_out(c10::DispatchKeySet dispatchKeySet, Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper=true, bool transpose=false, bool unitriangular=false);
    TORCH_API std::tuple<Tensor &,Tensor &> triangular_solve_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular, Tensor & X, Tensor & M);
    TORCH_API std::tuple<Tensor,Tensor> triangular_solve(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & A, bool upper=true, bool transpose=false, bool unitriangular=false);
    TORCH_API std::tuple<Tensor &,Tensor &> symeig_out(c10::DispatchKeySet dispatchKeySet, Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors=false, bool upper=true);
    TORCH_API std::tuple<Tensor &,Tensor &> symeig_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool eigenvectors, bool upper, Tensor & e, Tensor & V);
    TORCH_API std::tuple<Tensor,Tensor> symeig(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool eigenvectors=false, bool upper=true);
    TORCH_API std::tuple<Tensor,Tensor> _symeig_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool eigenvectors, bool upper);
    TORCH_API std::tuple<Tensor &,Tensor &> eig_out(c10::DispatchKeySet dispatchKeySet, Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors=false);
    TORCH_API std::tuple<Tensor &,Tensor &> eig_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool eigenvectors, Tensor & e, Tensor & v);
    TORCH_API std::tuple<Tensor,Tensor> eig(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool eigenvectors=false);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> svd_out(c10::DispatchKeySet dispatchKeySet, Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some=true, bool compute_uv=true);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> svd_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool some, bool compute_uv, Tensor & U, Tensor & S, Tensor & V);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> svd(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool some=true, bool compute_uv=true);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _svd_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool some, bool compute_uv);
    TORCH_API Tensor swapaxes(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t axis0, int64_t axis1);
    TORCH_API Tensor & swapaxes_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t axis0, int64_t axis1);
    TORCH_API Tensor swapdims(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim0, int64_t dim1);
    TORCH_API Tensor & swapdims_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim0, int64_t dim1);
    TORCH_API Tensor & cholesky_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, bool upper=false);
    TORCH_API Tensor & cholesky_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool upper, Tensor & out);
    TORCH_API Tensor cholesky(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool upper=false);
    TORCH_API Tensor _cholesky_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool upper);
    TORCH_API Tensor & cholesky_solve_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & input2, bool upper=false);
    TORCH_API Tensor & cholesky_solve_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & input2, bool upper, Tensor & out);
    TORCH_API Tensor cholesky_solve(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & input2, bool upper=false);
    TORCH_API Tensor _cholesky_solve_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & A, bool upper);
    TORCH_API std::tuple<Tensor,Tensor> solve(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & A);
    TORCH_API std::tuple<Tensor &,Tensor &> solve_out(c10::DispatchKeySet dispatchKeySet, Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A);
    TORCH_API std::tuple<Tensor &,Tensor &> solve_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & A, Tensor & solution, Tensor & lu);
    TORCH_API std::tuple<Tensor,Tensor> _solve_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & A);
    TORCH_API Tensor cholesky_inverse(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool upper=false);
    TORCH_API Tensor & cholesky_inverse_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, bool upper=false);
    TORCH_API Tensor & cholesky_inverse_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool upper, Tensor & out);
    TORCH_API std::tuple<Tensor &,Tensor &> qr_out(c10::DispatchKeySet dispatchKeySet, Tensor & Q, Tensor & R, const Tensor & self, bool some=true);
    TORCH_API std::tuple<Tensor &,Tensor &> qr_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool some, Tensor & Q, Tensor & R);
    TORCH_API std::tuple<Tensor,Tensor> qr(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool some=true);
    TORCH_API std::tuple<Tensor &,Tensor &> geqrf_out(c10::DispatchKeySet dispatchKeySet, Tensor & a, Tensor & tau, const Tensor & self);
    TORCH_API std::tuple<Tensor &,Tensor &> geqrf_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & a, Tensor & tau);
    TORCH_API std::tuple<Tensor,Tensor> geqrf(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & orgqr_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & input2);
    TORCH_API Tensor & orgqr_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & input2, Tensor & out);
    TORCH_API Tensor orgqr(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & input2);
    TORCH_API Tensor & ormqr_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left=true, bool transpose=false);
    TORCH_API Tensor & ormqr_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose, Tensor & out);
    TORCH_API Tensor ormqr(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left=true, bool transpose=false);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _lu_with_info(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool pivot=true, bool check_errors=true);
    TORCH_API Tensor & lu_solve_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);
    TORCH_API Tensor & lu_solve_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots, Tensor & out);
    TORCH_API Tensor lu_solve(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);
    TORCH_API Tensor _lu_solve_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);
    TORCH_API Tensor & multinomial_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t num_samples, bool replacement=false, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & multinomial_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor multinomial(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t num_samples, bool replacement=false, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & lgamma_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & lgamma_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor & lgamma_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor lgamma(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & digamma_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & digamma_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor digamma(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & polygamma_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t n, const Tensor & self);
    TORCH_API Tensor & polygamma_outf(c10::DispatchKeySet dispatchKeySet, int64_t n, const Tensor & self, Tensor & out);
    TORCH_API Tensor polygamma(c10::DispatchKeySet dispatchKeySet, int64_t n, const Tensor & self);
    TORCH_API Tensor erfinv(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & erfinv_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & erfinv_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & erfinv_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor i0(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & i0_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & i0_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & i0_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor sign(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & sign_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor & sign_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & sign_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor signbit(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & signbit_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & signbit_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor dist(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & p=2);
    TORCH_API Tensor & atan2_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & atan2_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor atan2(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & lerp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & end, const Scalar & weight);
    TORCH_API Tensor & lerp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & end, const Scalar & weight, Tensor & out);
    TORCH_API Tensor & lerp_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight);
    TORCH_API Tensor & lerp_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & end, const Tensor & weight, Tensor & out);
    TORCH_API Tensor lerp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & end, const Scalar & weight);
    TORCH_API Tensor lerp(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & end, const Tensor & weight);
    TORCH_API Tensor & histc_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t bins=100, const Scalar & min=0, const Scalar & max=0);
    TORCH_API Tensor & histc_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t bins, const Scalar & min, const Scalar & max, Tensor & out);
    TORCH_API Tensor histc(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t bins=100, const Scalar & min=0, const Scalar & max=0);
    TORCH_API Tensor & fmod_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & fmod_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor fmod(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & fmod_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & fmod_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor fmod(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & hypot_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & hypot_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor hypot(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & hypot_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & igamma_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & igamma_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor igamma(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & igamma_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & igammac_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & igammac_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor igammac(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & igammac_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & nextafter_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & nextafter_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor nextafter(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & nextafter_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & other);
    TORCH_API Tensor & remainder_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & remainder_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other, Tensor & out);
    TORCH_API Tensor remainder(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & other);
    TORCH_API Tensor & remainder_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & remainder_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor remainder(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor min(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor fmin(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & fmin_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & fmin_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor max(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor fmax(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & fmax_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & fmax_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor maximum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & maximum_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & maximum_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor max(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & max_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & max_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor minimum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & minimum_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & minimum_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor & min_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & min_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor min(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & quantile_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, double q, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & quantile_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim, Tensor & out);
    TORCH_API Tensor quantile(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double q, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & quantile_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & q, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & quantile_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim, Tensor & out);
    TORCH_API Tensor quantile(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & q, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & nanquantile_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, double q, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & nanquantile_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim, Tensor & out);
    TORCH_API Tensor nanquantile(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double q, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & nanquantile_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & q, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API Tensor & nanquantile_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim, Tensor & out);
    TORCH_API Tensor nanquantile(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & q, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> sort_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t dim=-1, bool descending=false);
    TORCH_API std::tuple<Tensor &,Tensor &> sort_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool descending, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor &,Tensor &> sort_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, c10::optional<bool> stable, int64_t dim=-1, bool descending=false);
    TORCH_API std::tuple<Tensor &,Tensor &> sort_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> sort(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim=-1, bool descending=false);
    TORCH_API std::tuple<Tensor,Tensor> sort(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<bool> stable, int64_t dim=-1, bool descending=false);
    TORCH_API std::tuple<Tensor &,Tensor &> sort_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending=false);
    TORCH_API std::tuple<Tensor &,Tensor &> sort_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool descending, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor &,Tensor &> sort_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, c10::optional<bool> stable, Dimname dim, bool descending=false);
    TORCH_API std::tuple<Tensor &,Tensor &> sort_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<bool> stable, Dimname dim, bool descending, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> sort(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool descending=false);
    TORCH_API std::tuple<Tensor,Tensor> sort(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<bool> stable, Dimname dim, bool descending=false);
    TORCH_API Tensor & msort_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & msort_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor msort(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor argsort(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim=-1, bool descending=false);
    TORCH_API Tensor argsort(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Dimname dim, bool descending=false);
    TORCH_API std::tuple<Tensor &,Tensor &> topk_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);
    TORCH_API std::tuple<Tensor &,Tensor &> topk_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, Tensor & values, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> topk(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);
    TORCH_API Tensor all(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor any(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & renorm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & p, int64_t dim, const Scalar & maxnorm);
    TORCH_API Tensor & renorm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & p, int64_t dim, const Scalar & maxnorm, Tensor & out);
    TORCH_API Tensor renorm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & p, int64_t dim, const Scalar & maxnorm);
    TORCH_API Tensor unfold(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dimension, int64_t size, int64_t step);
    TORCH_API Tensor unfold_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_in, IntArrayRef input_sizes, int64_t dim, int64_t size, int64_t step);
    TORCH_API bool equal(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & pow_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & exponent);
    TORCH_API Tensor & pow_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & exponent, Tensor & out);
    TORCH_API Tensor pow(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & exponent);
    TORCH_API Tensor & pow_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Scalar & self, const Tensor & exponent);
    TORCH_API Tensor & pow_outf(c10::DispatchKeySet dispatchKeySet, const Scalar & self, const Tensor & exponent, Tensor & out);
    TORCH_API Tensor pow(c10::DispatchKeySet dispatchKeySet, const Scalar & self, const Tensor & exponent);
    TORCH_API Tensor & pow_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & exponent);
    TORCH_API Tensor & pow_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & exponent, Tensor & out);
    TORCH_API Tensor pow(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & exponent);
    TORCH_API Tensor & pow_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & exponent);
    TORCH_API Tensor & pow_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & exponent);
    TORCH_API Tensor & float_power_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & exponent);
    TORCH_API Tensor & float_power_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & exponent, Tensor & out);
    TORCH_API Tensor float_power(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & exponent);
    TORCH_API Tensor & float_power_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Scalar & self, const Tensor & exponent);
    TORCH_API Tensor & float_power_outf(c10::DispatchKeySet dispatchKeySet, const Scalar & self, const Tensor & exponent, Tensor & out);
    TORCH_API Tensor float_power(c10::DispatchKeySet dispatchKeySet, const Scalar & self, const Tensor & exponent);
    TORCH_API Tensor & float_power_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & exponent);
    TORCH_API Tensor & float_power_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & exponent, Tensor & out);
    TORCH_API Tensor float_power(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & exponent);
    TORCH_API Tensor & float_power_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & exponent);
    TORCH_API Tensor & float_power_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & exponent);
    TORCH_API Tensor & normal_(c10::DispatchKeySet dispatchKeySet, Tensor & self, double mean=0, double std=1, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & normal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & mean, double std=1, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & normal_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & mean, double std, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor normal(c10::DispatchKeySet dispatchKeySet, const Tensor & mean, double std=1, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & normal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, double mean, const Tensor & std, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & normal_outf(c10::DispatchKeySet dispatchKeySet, double mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor normal(c10::DispatchKeySet dispatchKeySet, double mean, const Tensor & std, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & normal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & mean, const Tensor & std, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & normal_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor normal(c10::DispatchKeySet dispatchKeySet, const Tensor & mean, const Tensor & std, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor normal(c10::DispatchKeySet dispatchKeySet, double mean, double std, IntArrayRef size, c10::optional<Generator> generator=c10::nullopt, TensorOptions options={});
    TORCH_API Tensor normal(c10::DispatchKeySet dispatchKeySet, double mean, double std, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & normal_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, double mean, double std, IntArrayRef size, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & normal_outf(c10::DispatchKeySet dispatchKeySet, double mean, double std, IntArrayRef size, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor alias(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & _index_copy_(c10::DispatchKeySet dispatchKeySet, Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
    TORCH_API Tensor _cumsum(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API Tensor & _cumsum_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim);
    TORCH_API Tensor & _cumsum_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, Tensor & out);
    TORCH_API Tensor _cumprod(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim);
    TORCH_API Tensor & _cumprod_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim);
    TORCH_API Tensor & _cumprod_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, Tensor & out);
    TORCH_API Tensor _var(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool unbiased=true);
    TORCH_API Tensor _std(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool unbiased=true);
    TORCH_API void _amp_foreach_non_finite_check_and_unscale_(c10::DispatchKeySet dispatchKeySet, TensorList self, Tensor & found_inf, const Tensor & inv_scale);
    TORCH_API Tensor _amp_update_scale(c10::DispatchKeySet dispatchKeySet, Tensor & growth_tracker, const Tensor & current_scale, const Tensor & found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval);
    TORCH_API Tensor _cat(c10::DispatchKeySet dispatchKeySet, TensorList tensors, int64_t dim=0);
    TORCH_API Tensor & _cat_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors, int64_t dim=0);
    TORCH_API Tensor & _cat_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, int64_t dim, Tensor & out);
    TORCH_API std::vector<Tensor> _foreach_add(c10::DispatchKeySet dispatchKeySet, TensorList tensors, const Scalar & scalar);
    TORCH_API void _foreach_add_(c10::DispatchKeySet dispatchKeySet, TensorList self, const Scalar & scalar);
    TORCH_API std::vector<Tensor> _foreach_sub(c10::DispatchKeySet dispatchKeySet, TensorList tensors, const Scalar & scalar);
    TORCH_API void _foreach_sub_(c10::DispatchKeySet dispatchKeySet, TensorList self, const Scalar & scalar);
    TORCH_API std::vector<Tensor> _foreach_mul(c10::DispatchKeySet dispatchKeySet, TensorList tensors, const Scalar & scalar);
    TORCH_API void _foreach_mul_(c10::DispatchKeySet dispatchKeySet, TensorList self, const Scalar & scalar);
    TORCH_API std::vector<Tensor> _foreach_div(c10::DispatchKeySet dispatchKeySet, TensorList tensors, const Scalar & scalar);
    TORCH_API void _foreach_div_(c10::DispatchKeySet dispatchKeySet, TensorList self, const Scalar & scalar);
    TORCH_API std::vector<Tensor> _foreach_add(c10::DispatchKeySet dispatchKeySet, TensorList tensors1, TensorList tensors2, const Scalar & alpha=1);
    TORCH_API void _foreach_add_(c10::DispatchKeySet dispatchKeySet, TensorList self, TensorList other, const Scalar & alpha=1);
    TORCH_API std::vector<Tensor> _foreach_sub(c10::DispatchKeySet dispatchKeySet, TensorList tensors1, TensorList tensors2, const Scalar & alpha=1);
    TORCH_API void _foreach_sub_(c10::DispatchKeySet dispatchKeySet, TensorList self, TensorList other, const Scalar & alpha=1);
    TORCH_API std::vector<Tensor> _foreach_mul(c10::DispatchKeySet dispatchKeySet, TensorList tensors1, TensorList tensors2);
    TORCH_API void _foreach_mul_(c10::DispatchKeySet dispatchKeySet, TensorList self, TensorList other);
    TORCH_API std::vector<Tensor> _foreach_div(c10::DispatchKeySet dispatchKeySet, TensorList tensors1, TensorList tensors2);
    TORCH_API void _foreach_div_(c10::DispatchKeySet dispatchKeySet, TensorList self, TensorList other);
    TORCH_API std::vector<Tensor> _foreach_add(c10::DispatchKeySet dispatchKeySet, TensorList tensors, ArrayRef<Scalar> scalars);
    TORCH_API void _foreach_add_(c10::DispatchKeySet dispatchKeySet, TensorList self, ArrayRef<Scalar> scalars);
    TORCH_API std::vector<Tensor> _foreach_sub(c10::DispatchKeySet dispatchKeySet, TensorList tensors, ArrayRef<Scalar> scalars);
    TORCH_API void _foreach_sub_(c10::DispatchKeySet dispatchKeySet, TensorList self, ArrayRef<Scalar> scalars);
    TORCH_API std::vector<Tensor> _foreach_div(c10::DispatchKeySet dispatchKeySet, TensorList tensors, ArrayRef<Scalar> scalars);
    TORCH_API void _foreach_div_(c10::DispatchKeySet dispatchKeySet, TensorList self, ArrayRef<Scalar> scalars);
    TORCH_API std::vector<Tensor> _foreach_mul(c10::DispatchKeySet dispatchKeySet, TensorList tensors, ArrayRef<Scalar> scalars);
    TORCH_API void _foreach_mul_(c10::DispatchKeySet dispatchKeySet, TensorList self, ArrayRef<Scalar> scalars);
    TORCH_API std::vector<Tensor> _foreach_exp(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_zero_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API void _foreach_exp_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_sqrt(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_sqrt_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_abs(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_abs_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_acos(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_acos_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_asin(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_asin_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_atan(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_atan_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_ceil(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_ceil_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_cos(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_cos_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_cosh(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_cosh_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_erf(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_erf_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_erfc(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_erfc_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_expm1(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_expm1_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_floor(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_floor_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_log(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_log_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_log10(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_log10_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_log1p(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_log1p_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_log2(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_log2_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_neg(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_neg_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_tan(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_tan_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_tanh(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_tanh_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_sin(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_sin_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_sinh(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_sinh_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_round(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_round_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_lgamma(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_lgamma_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_frac(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_frac_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_reciprocal(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_reciprocal_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_sigmoid(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_sigmoid_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API std::vector<Tensor> _foreach_trunc(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API void _foreach_trunc_(c10::DispatchKeySet dispatchKeySet, TensorList self);
    TORCH_API void _foreach_addcdiv_(c10::DispatchKeySet dispatchKeySet, TensorList self, TensorList tensor1, TensorList tensor2, const Scalar & value=1);
    TORCH_API void _foreach_addcmul_(c10::DispatchKeySet dispatchKeySet, TensorList self, TensorList tensor1, TensorList tensor2, const Scalar & value=1);
    TORCH_API void _foreach_addcdiv_(c10::DispatchKeySet dispatchKeySet, TensorList self, TensorList tensor1, TensorList tensor2, ArrayRef<Scalar> scalars);
    TORCH_API void _foreach_addcmul_(c10::DispatchKeySet dispatchKeySet, TensorList self, TensorList tensor1, TensorList tensor2, ArrayRef<Scalar> scalars);
    TORCH_API std::vector<Tensor> _foreach_addcdiv(c10::DispatchKeySet dispatchKeySet, TensorList input, TensorList tensor1, TensorList tensor2, const Scalar & value=1);
    TORCH_API std::vector<Tensor> _foreach_addcmul(c10::DispatchKeySet dispatchKeySet, TensorList input, TensorList tensor1, TensorList tensor2, const Scalar & value=1);
    TORCH_API std::vector<Tensor> _foreach_addcdiv(c10::DispatchKeySet dispatchKeySet, TensorList input, TensorList tensor1, TensorList tensor2, ArrayRef<Scalar> scalars);
    TORCH_API std::vector<Tensor> _foreach_addcmul(c10::DispatchKeySet dispatchKeySet, TensorList input, TensorList tensor1, TensorList tensor2, ArrayRef<Scalar> scalars);
    TORCH_API std::vector<Tensor> _foreach_maximum(c10::DispatchKeySet dispatchKeySet, TensorList tensors1, TensorList tensors2);
    TORCH_API std::vector<Tensor> _foreach_minimum(c10::DispatchKeySet dispatchKeySet, TensorList tensors1, TensorList tensors2);
    TORCH_API std::tuple<Tensor,Tensor> _mode(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim=-1, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> _mode_out(c10::DispatchKeySet dispatchKeySet, Tensor & values, Tensor & indices, const Tensor & self, int64_t dim=-1, bool keepdim=false);
    TORCH_API std::tuple<Tensor &,Tensor &> _mode_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices);
    TORCH_API Tensor bucketize(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & boundaries, bool out_int32=false, bool right=false);
    TORCH_API Tensor & bucketize_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & boundaries, bool out_int32=false, bool right=false);
    TORCH_API Tensor & bucketize_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & boundaries, bool out_int32, bool right, Tensor & out);
    TORCH_API Tensor bucketize(c10::DispatchKeySet dispatchKeySet, const Scalar & self, const Tensor & boundaries, bool out_int32=false, bool right=false);
    TORCH_API Tensor searchsorted(c10::DispatchKeySet dispatchKeySet, const Tensor & sorted_sequence, const Tensor & self, bool out_int32=false, bool right=false);
    TORCH_API Tensor & searchsorted_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & sorted_sequence, const Tensor & self, bool out_int32=false, bool right=false);
    TORCH_API Tensor & searchsorted_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & sorted_sequence, const Tensor & self, bool out_int32, bool right, Tensor & out);
    TORCH_API Tensor searchsorted(c10::DispatchKeySet dispatchKeySet, const Tensor & sorted_sequence, const Scalar & self, bool out_int32=false, bool right=false);
    TORCH_API Tensor & mse_loss_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & mse_loss_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out);
    TORCH_API Tensor mse_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & mse_loss_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
    TORCH_API Tensor & mse_loss_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input);
    TORCH_API Tensor mse_loss_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
    TORCH_API Tensor & l1_loss_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & l1_loss_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out);
    TORCH_API Tensor l1_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & l1_loss_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
    TORCH_API Tensor & l1_loss_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input);
    TORCH_API Tensor l1_loss_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
    TORCH_API Tensor & multi_margin_loss_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, const Scalar & p=1, const Scalar & margin=1, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & multi_margin_loss_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out);
    TORCH_API Tensor multi_margin_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const Scalar & p=1, const Scalar & margin=1, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & multi_margin_loss_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & multi_margin_loss_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input);
    TORCH_API Tensor multi_margin_loss_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & multilabel_margin_loss_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & multilabel_margin_loss_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out);
    TORCH_API Tensor multilabel_margin_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
    TORCH_API std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out(c10::DispatchKeySet dispatchKeySet, Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction);
    TORCH_API std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & output, Tensor & is_target);
    TORCH_API std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction);
    TORCH_API Tensor & multilabel_margin_loss_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target);
    TORCH_API Tensor & multilabel_margin_loss_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target, Tensor & grad_input);
    TORCH_API Tensor multilabel_margin_loss_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target);
    TORCH_API Tensor & nll_loss_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean, int64_t ignore_index=-100);
    TORCH_API Tensor & nll_loss_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & out);
    TORCH_API Tensor nll_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean, int64_t ignore_index=-100);
    TORCH_API std::tuple<Tensor &,Tensor &> nll_loss_forward_out(c10::DispatchKeySet dispatchKeySet, Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
    TORCH_API std::tuple<Tensor &,Tensor &> nll_loss_forward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight);
    TORCH_API std::tuple<Tensor,Tensor> nll_loss_forward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
    TORCH_API Tensor & nll_loss_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
    TORCH_API Tensor & nll_loss_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input);
    TORCH_API Tensor nll_loss_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
    TORCH_API Tensor & nll_loss2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean, int64_t ignore_index=-100);
    TORCH_API Tensor & nll_loss2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & out);
    TORCH_API Tensor nll_loss2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean, int64_t ignore_index=-100);
    TORCH_API std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out(c10::DispatchKeySet dispatchKeySet, Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
    TORCH_API std::tuple<Tensor &,Tensor &> nll_loss2d_forward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight);
    TORCH_API std::tuple<Tensor,Tensor> nll_loss2d_forward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
    TORCH_API Tensor & nll_loss2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
    TORCH_API Tensor & nll_loss2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input);
    TORCH_API Tensor nll_loss2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
    TORCH_API Tensor & smooth_l1_loss_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean, double beta=1.0);
    TORCH_API Tensor & smooth_l1_loss_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction, double beta, Tensor & out);
    TORCH_API Tensor smooth_l1_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean, double beta=1.0);
    TORCH_API Tensor & smooth_l1_loss_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double beta);
    TORCH_API Tensor & smooth_l1_loss_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double beta, Tensor & grad_input);
    TORCH_API Tensor smooth_l1_loss_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double beta);
    TORCH_API Tensor & huber_loss_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean, double delta=1.0);
    TORCH_API Tensor & huber_loss_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction, double delta, Tensor & out);
    TORCH_API Tensor huber_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean, double delta=1.0);
    TORCH_API Tensor & huber_loss_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double delta);
    TORCH_API Tensor & huber_loss_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double delta, Tensor & grad_input);
    TORCH_API Tensor huber_loss_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double delta);
    TORCH_API Tensor & soft_margin_loss_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & soft_margin_loss_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out);
    TORCH_API Tensor soft_margin_loss(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
    TORCH_API Tensor & soft_margin_loss_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
    TORCH_API Tensor & soft_margin_loss_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input);
    TORCH_API Tensor soft_margin_loss_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
    TORCH_API Tensor & elu_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & alpha=1, const Scalar & scale=1, const Scalar & input_scale=1);
    TORCH_API Tensor & elu_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & alpha, const Scalar & scale, const Scalar & input_scale, Tensor & out);
    TORCH_API Tensor elu(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & alpha=1, const Scalar & scale=1, const Scalar & input_scale=1);
    TORCH_API Tensor elu_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Scalar & alpha, const Scalar & scale, const Scalar & input_scale, bool is_result, const Tensor & self_or_result);
    TORCH_API Tensor & elu_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & alpha=1, const Scalar & scale=1, const Scalar & input_scale=1);
    TORCH_API Tensor & glu_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t dim=-1);
    TORCH_API Tensor & glu_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim, Tensor & out);
    TORCH_API Tensor glu(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t dim=-1);
    TORCH_API Tensor & glu_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim);
    TORCH_API Tensor & glu_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, int64_t dim, Tensor & grad_input);
    TORCH_API Tensor glu_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, int64_t dim);
    TORCH_API Tensor & hardsigmoid_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & hardsigmoid_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor hardsigmoid(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & hardsigmoid_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor hardsigmoid_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self);
    TORCH_API Tensor & hardtanh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & min_val=-1, const Scalar & max_val=1);
    TORCH_API Tensor & hardtanh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & min_val, const Scalar & max_val, Tensor & out);
    TORCH_API Tensor hardtanh(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & min_val=-1, const Scalar & max_val=1);
    TORCH_API Tensor & hardtanh_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Scalar & min_val, const Scalar & max_val);
    TORCH_API Tensor & hardtanh_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Scalar & min_val, const Scalar & max_val, Tensor & grad_input);
    TORCH_API Tensor hardtanh_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Scalar & min_val, const Scalar & max_val);
    TORCH_API Tensor & hardtanh_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & min_val=-1, const Scalar & max_val=1);
    TORCH_API Tensor & hardswish_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & hardswish_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor hardswish(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & hardswish_(c10::DispatchKeySet dispatchKeySet, Tensor & self);
    TORCH_API Tensor hardswish_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self);
    TORCH_API Tensor & leaky_relu_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & negative_slope=0.01);
    TORCH_API Tensor & leaky_relu_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & negative_slope, Tensor & out);
    TORCH_API Tensor leaky_relu(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & negative_slope=0.01);
    TORCH_API Tensor leaky_relu_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Scalar & negative_slope, bool self_is_result);
    TORCH_API Tensor & leaky_relu_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Scalar & negative_slope=0.01);
    TORCH_API Tensor & log_sigmoid_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & log_sigmoid_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor log_sigmoid(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out(c10::DispatchKeySet dispatchKeySet, Tensor & output, Tensor & buffer, const Tensor & self);
    TORCH_API std::tuple<Tensor &,Tensor &> log_sigmoid_forward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & output, Tensor & buffer);
    TORCH_API std::tuple<Tensor,Tensor> log_sigmoid_forward(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & log_sigmoid_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer);
    TORCH_API Tensor & log_sigmoid_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & buffer, Tensor & grad_input);
    TORCH_API Tensor log_sigmoid_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & buffer);
    TORCH_API Tensor & rrelu_with_noise_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & noise, const Scalar & lower=0.125, const Scalar & upper=0.3333333333333333, bool training=false, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & rrelu_with_noise_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & noise, const Scalar & lower, const Scalar & upper, bool training, c10::optional<Generator> generator, Tensor & out);
    TORCH_API Tensor rrelu_with_noise(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & noise, const Scalar & lower=0.125, const Scalar & upper=0.3333333333333333, bool training=false, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor rrelu_with_noise_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & noise, const Scalar & lower, const Scalar & upper, bool training, bool self_is_result);
    TORCH_API Tensor & rrelu_with_noise_(c10::DispatchKeySet dispatchKeySet, Tensor & self, const Tensor & noise, const Scalar & lower=0.125, const Scalar & upper=0.3333333333333333, bool training=false, c10::optional<Generator> generator=c10::nullopt);
    TORCH_API Tensor & softplus_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & beta=1, const Scalar & threshold=20);
    TORCH_API Tensor & softplus_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & beta, const Scalar & threshold, Tensor & out);
    TORCH_API Tensor softplus(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & beta=1, const Scalar & threshold=20);
    TORCH_API Tensor & softplus_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Scalar & beta, const Scalar & threshold, const Tensor & output);
    TORCH_API Tensor & softplus_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Scalar & beta, const Scalar & threshold, const Tensor & output, Tensor & grad_input);
    TORCH_API Tensor softplus_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Scalar & beta, const Scalar & threshold, const Tensor & output);
    TORCH_API Tensor & softshrink_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Scalar & lambd=0.5);
    TORCH_API Tensor & softshrink_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & lambd, Tensor & out);
    TORCH_API Tensor softshrink(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Scalar & lambd=0.5);
    TORCH_API Tensor & softshrink_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Scalar & lambd);
    TORCH_API Tensor & softshrink_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Scalar & lambd, Tensor & grad_input);
    TORCH_API Tensor softshrink_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Scalar & lambd);
    TORCH_API Tensor & adaptive_avg_pool2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size);
    TORCH_API Tensor & adaptive_avg_pool2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, Tensor & out);
    TORCH_API Tensor adaptive_avg_pool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size);
    TORCH_API Tensor mkldnn_adaptive_avg_pool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size);
    TORCH_API Tensor mkldnn_adaptive_avg_pool2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self);
    TORCH_API Tensor _adaptive_avg_pool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size);
    TORCH_API Tensor _adaptive_avg_pool2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self);
    TORCH_API Tensor & adaptive_avg_pool3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size);
    TORCH_API Tensor & adaptive_avg_pool3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, Tensor & out);
    TORCH_API Tensor adaptive_avg_pool3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size);
    TORCH_API Tensor & adaptive_avg_pool3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self);
    TORCH_API Tensor & adaptive_avg_pool3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, Tensor & grad_input);
    TORCH_API Tensor adaptive_avg_pool3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self);
    TORCH_API std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);
    TORCH_API std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, Tensor & out, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> adaptive_max_pool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size);
    TORCH_API Tensor & adaptive_max_pool2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);
    TORCH_API Tensor & adaptive_max_pool2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & indices, Tensor & grad_input);
    TORCH_API Tensor adaptive_max_pool2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & indices);
    TORCH_API std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);
    TORCH_API std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, Tensor & out, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> adaptive_max_pool3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size);
    TORCH_API Tensor & adaptive_max_pool3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);
    TORCH_API Tensor & adaptive_max_pool3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & indices, Tensor & grad_input);
    TORCH_API Tensor adaptive_max_pool3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & indices);
    TORCH_API Tensor & avg_pool2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);
    TORCH_API Tensor & avg_pool2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out);
    TORCH_API Tensor avg_pool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);
    TORCH_API Tensor & avg_pool2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
    TORCH_API Tensor & avg_pool2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input);
    TORCH_API Tensor avg_pool2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
    TORCH_API Tensor & avg_pool3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);
    TORCH_API Tensor & avg_pool3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out);
    TORCH_API Tensor avg_pool3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);
    TORCH_API Tensor & avg_pool3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
    TORCH_API Tensor & avg_pool3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input);
    TORCH_API Tensor avg_pool3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
    TORCH_API std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
    TORCH_API std::tuple<Tensor &,Tensor &> fractional_max_pool2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples, Tensor & output, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> fractional_max_pool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
    TORCH_API Tensor & fractional_max_pool2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
    TORCH_API Tensor & fractional_max_pool2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices, Tensor & grad_input);
    TORCH_API Tensor fractional_max_pool2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
    TORCH_API std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
    TORCH_API std::tuple<Tensor &,Tensor &> fractional_max_pool3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples, Tensor & output, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> fractional_max_pool3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
    TORCH_API Tensor & fractional_max_pool3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
    TORCH_API Tensor & fractional_max_pool3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices, Tensor & grad_input);
    TORCH_API Tensor fractional_max_pool3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
    TORCH_API std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, Tensor & out, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> max_pool2d_with_indices(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor & max_pool2d_with_indices_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
    TORCH_API Tensor & max_pool2d_with_indices_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices, Tensor & grad_input);
    TORCH_API Tensor max_pool2d_with_indices_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
    TORCH_API std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, Tensor & out, Tensor & indices);
    TORCH_API std::tuple<Tensor,Tensor> max_pool3d_with_indices(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
    TORCH_API Tensor & max_pool3d_with_indices_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
    TORCH_API Tensor & max_pool3d_with_indices_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices, Tensor & grad_input);
    TORCH_API Tensor max_pool3d_with_indices_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
    TORCH_API Tensor & max_unpool2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size);
    TORCH_API Tensor & max_unpool2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & indices, IntArrayRef output_size, Tensor & out);
    TORCH_API Tensor max_unpool2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & indices, IntArrayRef output_size);
    TORCH_API Tensor & max_unpool2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);
    TORCH_API Tensor & max_unpool2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, Tensor & grad_input);
    TORCH_API Tensor max_unpool2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);
    TORCH_API Tensor & max_unpool3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
    TORCH_API Tensor & max_unpool3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding, Tensor & out);
    TORCH_API Tensor max_unpool3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
    TORCH_API Tensor & max_unpool3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
    TORCH_API Tensor & max_unpool3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding, Tensor & grad_input);
    TORCH_API Tensor max_unpool3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
    TORCH_API Tensor & reflection_pad1d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & reflection_pad1d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding, Tensor & out);
    TORCH_API Tensor reflection_pad1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & reflection_pad1d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & reflection_pad1d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
    TORCH_API Tensor reflection_pad1d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & reflection_pad2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & reflection_pad2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding, Tensor & out);
    TORCH_API Tensor reflection_pad2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & reflection_pad2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & reflection_pad2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
    TORCH_API Tensor reflection_pad2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad1d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad1d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding, Tensor & out);
    TORCH_API Tensor replication_pad1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad1d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad1d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
    TORCH_API Tensor replication_pad1d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding, Tensor & out);
    TORCH_API Tensor replication_pad2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
    TORCH_API Tensor replication_pad2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding, Tensor & out);
    TORCH_API Tensor replication_pad3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor & replication_pad3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
    TORCH_API Tensor replication_pad3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
    TORCH_API Tensor upsample_linear1d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_linear1d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_bilinear2d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_bilinear2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_trilinear3d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_trilinear3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_bicubic2d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_bicubic2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_nearest1d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_nearest1d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_nearest2d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_nearest2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_nearest3d(c10::DispatchKeySet dispatchKeySet, const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor upsample_nearest3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors);
    TORCH_API Tensor & upsample_linear1d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales=c10::nullopt);
    TORCH_API Tensor & upsample_linear1d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales, Tensor & out);
    TORCH_API Tensor upsample_linear1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales=c10::nullopt);
    TORCH_API Tensor & upsample_linear1d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales=c10::nullopt);
    TORCH_API Tensor & upsample_linear1d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales, Tensor & grad_input);
    TORCH_API Tensor upsample_linear1d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales=c10::nullopt);
    TORCH_API Tensor & upsample_bilinear2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_bilinear2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
    TORCH_API Tensor upsample_bilinear2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_bilinear2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_bilinear2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
    TORCH_API Tensor upsample_bilinear2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_bicubic2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_bicubic2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
    TORCH_API Tensor upsample_bicubic2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_bicubic2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_bicubic2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
    TORCH_API Tensor upsample_bicubic2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_trilinear3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_trilinear3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
    TORCH_API Tensor upsample_trilinear3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_trilinear3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_trilinear3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
    TORCH_API Tensor upsample_trilinear3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_nearest1d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales=c10::nullopt);
    TORCH_API Tensor & upsample_nearest1d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales, Tensor & out);
    TORCH_API Tensor upsample_nearest1d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales=c10::nullopt);
    TORCH_API Tensor & upsample_nearest1d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales=c10::nullopt);
    TORCH_API Tensor & upsample_nearest1d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales, Tensor & grad_input);
    TORCH_API Tensor upsample_nearest1d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales=c10::nullopt);
    TORCH_API Tensor & upsample_nearest2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_nearest2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
    TORCH_API Tensor upsample_nearest2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_nearest2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_nearest2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
    TORCH_API Tensor upsample_nearest2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_nearest3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_nearest3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
    TORCH_API Tensor upsample_nearest3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_nearest3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & upsample_nearest3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
    TORCH_API Tensor upsample_nearest3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
    TORCH_API Tensor & sigmoid_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & output);
    TORCH_API Tensor & sigmoid_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output, Tensor & grad_input);
    TORCH_API Tensor sigmoid_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output);
    TORCH_API Tensor & logit_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & self, c10::optional<double> eps=c10::nullopt);
    TORCH_API Tensor & logit_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, c10::optional<double> eps, Tensor & grad_input);
    TORCH_API Tensor logit_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, c10::optional<double> eps=c10::nullopt);
    TORCH_API Tensor & tanh_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, const Tensor & output);
    TORCH_API Tensor & tanh_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output, Tensor & grad_input);
    TORCH_API Tensor tanh_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & output);
    TORCH_API Tensor & slow_conv_transpose2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);
    TORCH_API Tensor & slow_conv_transpose2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out);
    TORCH_API Tensor slow_conv_transpose2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask);
    TORCH_API Tensor & slow_conv_transpose3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);
    TORCH_API Tensor & slow_conv_transpose3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out);
    TORCH_API Tensor slow_conv_transpose3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);
    TORCH_API Tensor & thnn_conv2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);
    TORCH_API Tensor & thnn_conv2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & out);
    TORCH_API Tensor thnn_conv2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out(c10::DispatchKeySet dispatchKeySet, Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);
    TORCH_API Tensor & thnn_conv_depthwise2d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);
    TORCH_API Tensor & thnn_conv_depthwise2d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out);
    TORCH_API Tensor thnn_conv_depthwise2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);
    TORCH_API Tensor & thnn_conv_depthwise2d_forward_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
    TORCH_API Tensor & thnn_conv_depthwise2d_forward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out);
    TORCH_API Tensor thnn_conv_depthwise2d_forward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
    TORCH_API std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
    TORCH_API std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & grad_input, Tensor & grad_weight);
    TORCH_API std::tuple<Tensor,Tensor> thnn_conv_depthwise2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask);
    TORCH_API Tensor conv_depthwise3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> conv_depthwise3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> conv_depthwise3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> conv_depthwise3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);
    TORCH_API Tensor & slow_conv3d_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);
    TORCH_API Tensor & slow_conv3d_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & out);
    TORCH_API Tensor slow_conv3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out(c10::DispatchKeySet dispatchKeySet, Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv3d_forward(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);
    TORCH_API Tensor slow_conv_dilated2d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);
    TORCH_API Tensor slow_conv_dilated3d(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);
    TORCH_API Tensor & col2im_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
    TORCH_API Tensor & col2im_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & out);
    TORCH_API Tensor col2im(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
    TORCH_API Tensor & col2im_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
    TORCH_API Tensor & col2im_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & grad_input);
    TORCH_API Tensor col2im_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
    TORCH_API Tensor column_stack(c10::DispatchKeySet dispatchKeySet, TensorList tensors);
    TORCH_API Tensor & column_stack_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, TensorList tensors);
    TORCH_API Tensor & column_stack_outf(c10::DispatchKeySet dispatchKeySet, TensorList tensors, Tensor & out);
    TORCH_API Tensor & im2col_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
    TORCH_API Tensor & im2col_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & out);
    TORCH_API Tensor im2col(c10::DispatchKeySet dispatchKeySet, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
    TORCH_API Tensor & im2col_backward_out(c10::DispatchKeySet dispatchKeySet, Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
    TORCH_API Tensor & im2col_backward_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & grad_input);
    TORCH_API Tensor im2col_backward(c10::DispatchKeySet dispatchKeySet, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
    TORCH_API Tensor isfinite(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor isinf(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API void record_stream(c10::DispatchKeySet dispatchKeySet, Tensor & self, Stream s);
    TORCH_API Tensor isposinf(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & isposinf_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & isposinf_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor isneginf(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & isneginf_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & isneginf_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor _add_batch_dim(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t batch_dim, int64_t level);
    TORCH_API Tensor _remove_batch_dim(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t level, int64_t batch_size, int64_t out_dim);
    TORCH_API Tensor special_gammaln(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & special_gammaln_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & special_gammaln_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor fft_fft(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_fft_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_fft_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_ifft(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_ifft_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_ifft_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_rfft(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_rfft_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_rfft_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_irfft(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_irfft_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_irfft_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_hfft(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_hfft_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_hfft_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_ihfft(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_ihfft_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<int64_t> n=c10::nullopt, int64_t dim=-1, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_ihfft_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_fft2(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, IntArrayRef dim={-2,-1}, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_fft2_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, IntArrayRef dim={-2,-1}, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_fft2_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_ifft2(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, IntArrayRef dim={-2,-1}, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_ifft2_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, IntArrayRef dim={-2,-1}, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_ifft2_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_rfft2(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, IntArrayRef dim={-2,-1}, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_rfft2_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, IntArrayRef dim={-2,-1}, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_rfft2_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_irfft2(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, IntArrayRef dim={-2,-1}, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_irfft2_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, IntArrayRef dim={-2,-1}, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_irfft2_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_fftn(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_fftn_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_fftn_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_ifftn(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_ifftn_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_ifftn_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_rfftn(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_rfftn_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_rfftn_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_irfftn(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_irfftn_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<IntArrayRef> s=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, c10::optional<std::string> norm=c10::nullopt);
    TORCH_API Tensor & fft_irfftn_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out);
    TORCH_API Tensor fft_fftfreq(c10::DispatchKeySet dispatchKeySet, int64_t n, double d=1.0, TensorOptions options={});
    TORCH_API Tensor fft_fftfreq(c10::DispatchKeySet dispatchKeySet, int64_t n, double d, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & fft_fftfreq_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t n, double d=1.0);
    TORCH_API Tensor & fft_fftfreq_outf(c10::DispatchKeySet dispatchKeySet, int64_t n, double d, Tensor & out);
    TORCH_API Tensor fft_rfftfreq(c10::DispatchKeySet dispatchKeySet, int64_t n, double d=1.0, TensorOptions options={});
    TORCH_API Tensor fft_rfftfreq(c10::DispatchKeySet dispatchKeySet, int64_t n, double d, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
    TORCH_API Tensor & fft_rfftfreq_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, int64_t n, double d=1.0);
    TORCH_API Tensor & fft_rfftfreq_outf(c10::DispatchKeySet dispatchKeySet, int64_t n, double d, Tensor & out);
    TORCH_API Tensor fft_fftshift(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> dim=c10::nullopt);
    TORCH_API Tensor fft_ifftshift(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<IntArrayRef> dim=c10::nullopt);
    TORCH_API Tensor linalg_cholesky(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & linalg_cholesky_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & linalg_cholesky_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor linalg_det(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor det(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> linalg_lstsq(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & b, c10::optional<double> cond=c10::nullopt, c10::optional<std::string> driver=c10::nullopt);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> _lstsq_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & a, const Tensor & b, double cond, c10::optional<std::string> driver_name);
    TORCH_API std::tuple<Tensor,Tensor> linalg_slogdet(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API std::tuple<Tensor &,Tensor &> linalg_slogdet_out(c10::DispatchKeySet dispatchKeySet, Tensor & sign, Tensor & logabsdet, const Tensor & self);
    TORCH_API std::tuple<Tensor &,Tensor &> linalg_slogdet_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & sign, Tensor & logabsdet);
    TORCH_API std::tuple<Tensor,Tensor> _syevd_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool compute_eigenvectors, std::string uplo);
    TORCH_API std::tuple<Tensor,Tensor> linalg_eigh(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string UPLO="L");
    TORCH_API std::tuple<Tensor &,Tensor &> linalg_eigh_out(c10::DispatchKeySet dispatchKeySet, Tensor & eigvals, Tensor & eigvecs, const Tensor & self, std::string UPLO="L");
    TORCH_API std::tuple<Tensor &,Tensor &> linalg_eigh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string UPLO, Tensor & eigvals, Tensor & eigvecs);
    TORCH_API Tensor linalg_eigvalsh(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string UPLO="L");
    TORCH_API Tensor & linalg_eigvalsh_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, std::string UPLO="L");
    TORCH_API Tensor & linalg_eigvalsh_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string UPLO, Tensor & out);
    TORCH_API Tensor & _linalg_inv_out_helper_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Tensor & infos_lu, Tensor & infos_getri);
    TORCH_API Tensor linalg_inv(c10::DispatchKeySet dispatchKeySet, const Tensor & self);
    TORCH_API Tensor & linalg_inv_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self);
    TORCH_API Tensor & linalg_inv_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, Tensor & out);
    TORCH_API Tensor inner(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & inner_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other);
    TORCH_API Tensor & inner_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, Tensor & out);
    TORCH_API Tensor outer(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & vec2);
    TORCH_API Tensor & outer_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & vec2);
    TORCH_API Tensor & outer_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & vec2, Tensor & out);
    TORCH_API Tensor ger(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & vec2);
    TORCH_API Tensor & ger_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & vec2);
    TORCH_API Tensor & ger_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & vec2, Tensor & out);
    TORCH_API Tensor linalg_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & ord=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor linalg_norm(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string ord, c10::optional<IntArrayRef> dim=c10::nullopt, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & linalg_norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const c10::optional<Scalar> & ord=c10::nullopt, c10::optional<IntArrayRef> dim=c10::nullopt, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & linalg_norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API Tensor & linalg_norm_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, std::string ord, c10::optional<IntArrayRef> dim=c10::nullopt, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
    TORCH_API Tensor & linalg_norm_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> linalg_svd_out(c10::DispatchKeySet dispatchKeySet, Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool full_matrices=true, bool compute_uv=true);
    TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> linalg_svd_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool full_matrices, bool compute_uv, Tensor & U, Tensor & S, Tensor & V);
    TORCH_API std::tuple<Tensor,Tensor,Tensor> linalg_svd(c10::DispatchKeySet dispatchKeySet, const Tensor & self, bool full_matrices=true, bool compute_uv=true);
    TORCH_API Tensor linalg_cond(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p=c10::nullopt);
    TORCH_API Tensor & linalg_cond_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const c10::optional<Scalar> & p=c10::nullopt);
    TORCH_API Tensor & linalg_cond_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const c10::optional<Scalar> & p, Tensor & out);
    TORCH_API Tensor linalg_cond(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string p);
    TORCH_API Tensor & linalg_cond_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, std::string p);
    TORCH_API Tensor & linalg_cond_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string p, Tensor & out);
    TORCH_API Tensor linalg_pinv(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double rcond=1e-15, bool hermitian=false);
    TORCH_API Tensor linalg_pinv(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & rcond, bool hermitian=false);
    TORCH_API Tensor & linalg_pinv_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, double rcond=1e-15, bool hermitian=false);
    TORCH_API Tensor & linalg_pinv_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, double rcond, bool hermitian, Tensor & out);
    TORCH_API Tensor & linalg_pinv_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & rcond, bool hermitian=false);
    TORCH_API Tensor & linalg_pinv_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & rcond, bool hermitian, Tensor & out);
    TORCH_API Tensor & _linalg_solve_out_helper_(c10::DispatchKeySet dispatchKeySet, Tensor & self, Tensor & other, Tensor & infos);
    TORCH_API Tensor linalg_solve(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & other);
    TORCH_API Tensor & linalg_solve_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & input, const Tensor & other);
    TORCH_API Tensor & linalg_solve_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & input, const Tensor & other, Tensor & out);
    TORCH_API Tensor linalg_tensorinv(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t ind=2);
    TORCH_API Tensor & linalg_tensorinv_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, int64_t ind=2);
    TORCH_API Tensor & linalg_tensorinv_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, int64_t ind, Tensor & out);
    TORCH_API Tensor linalg_tensorsolve(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims=c10::nullopt);
    TORCH_API Tensor & linalg_tensorsolve_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims=c10::nullopt);
    TORCH_API Tensor & linalg_tensorsolve_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims, Tensor & out);
    TORCH_API std::tuple<Tensor,Tensor> linalg_qr(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string mode="reduced");
    TORCH_API std::tuple<Tensor &,Tensor &> linalg_qr_out(c10::DispatchKeySet dispatchKeySet, Tensor & Q, Tensor & R, const Tensor & self, std::string mode="reduced");
    TORCH_API std::tuple<Tensor &,Tensor &> linalg_qr_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string mode, Tensor & Q, Tensor & R);
    TORCH_API std::tuple<Tensor,Tensor> _linalg_qr_helper(c10::DispatchKeySet dispatchKeySet, const Tensor & self, std::string mode);
    TORCH_API Tensor linalg_matrix_rank(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<double> tol=c10::nullopt, bool hermitian=false);
    TORCH_API Tensor & linalg_matrix_rank_out(c10::DispatchKeySet dispatchKeySet, Tensor & out, const Tensor & self, c10::optional<double> tol=c10::nullopt, bool hermitian=false);
    TORCH_API Tensor & linalg_matrix_rank_outf(c10::DispatchKeySet dispatchKeySet, const Tensor & self, c10::optional<double> tol, bool hermitian, Tensor & out);
    TORCH_API Tensor _test_serialization_subcmul(c10::DispatchKeySet dispatchKeySet, const Tensor & self, const Tensor & other, const Scalar & alpha=1);
    TORCH_API Tensor _test_optional_intlist(c10::DispatchKeySet dispatchKeySet, const Tensor & values, c10::optional<IntArrayRef> addends);
    TORCH_API Tensor _test_optional_filled_intlist(c10::DispatchKeySet dispatchKeySet, const Tensor & values, c10::optional<IntArrayRef> addends);
    TORCH_API Tensor _test_optional_floatlist(c10::DispatchKeySet dispatchKeySet, const Tensor & values, c10::optional<ArrayRef<double>> addends);
    TORCH_API Tensor _test_string_default(c10::DispatchKeySet dispatchKeySet, const Tensor & dummy, std::string a="\"'\\", std::string b="\"'\\");
    TORCH_API Tensor _test_ambiguous_defaults(c10::DispatchKeySet dispatchKeySet, const Tensor & dummy, int64_t a=1, int64_t b=1);
    TORCH_API Tensor _test_ambiguous_defaults(c10::DispatchKeySet dispatchKeySet, const Tensor & dummy, int64_t a, std::string b);
} // namespace redispatch

}
